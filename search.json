[
  
    {
      "title"    : "Ruby on Rails(添加用户和微博对象)",
      "category" : "ruby",
      "tags"     : "ruby",
      "url"      : "/ruby/2018/02/28/rails-blog-models.html",
      "date"     : "2018年2月28日",
      "content"  : "<blockquote>\n  <p>Goals:添加Users资源和Microposts资源</p>\n</blockquote>\n\n<h4 id=\"1-users资源\">1. Users资源</h4>\n\n<p>目的:创建Users资源(对象),通过HTTP协议在网页中创建(create),读取(read),更新(update)和删除(delete)资源.</p>\n\n<p>1° 使用Rails内置脚手架生成Users资源</p>\n\n<p><code class=\"highlighter-rouge\">$ rails generate scaffold User name:string email:string</code></p>\n\n<p>① 脚手架中使用的名称与模型一样是单数,使用User;资源和控制器是复数,使用Users.</p>\n\n<p>② 没必要指定id字段,Rails会自动创建并将其设为表的主键.\n<!-- more --></p>\n\n<p>2° 迁移数据库</p>\n\n<p><code class=\"highlighter-rouge\">$ rails db:migrate</code></p>\n\n<p>① 这句命令的作用是使用新的User数据模型更新数据库(一般数据模型改变后使用).</p>\n\n<p>② Rails 5之前的版本<code class=\"highlighter-rouge\">db:migrate</code>命令使用<code class=\"highlighter-rouge\">rake</code>执行:</p>\n\n<p><code class=\"highlighter-rouge\">$ bundle exec rake db:migrate</code></p>\n\n<p>3 ° 浏览用户相关的页面</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>URL</th>\n      <th>动作</th>\n      <th>作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>/users</td>\n      <td>index</td>\n      <td>列出所有用户</td>\n    </tr>\n    <tr>\n      <td>/users/1</td>\n      <td>show</td>\n      <td>显示ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>/users/new</td>\n      <td>new</td>\n      <td>创建新用户</td>\n    </tr>\n    <tr>\n      <td>/users/1/edit</td>\n      <td>edit</td>\n      <td>编辑ID为1的用户</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>① Users资源索引页: http://localhost:3000/users</p>\n\n<p><img src=\"/assets/images/posts/2-01.png\" alt=\"2-01\" class=\"post-r-img\" /></p>\n\n<p>② 新建用户页面: http://localhost:3000/users/new</p>\n\n<p><img src=\"/assets/images/posts/2-02.png\" alt=\"2-02\" class=\"post-r-img\" /></p>\n\n<p>③ 显示某个用户的页面: http://localhost:3000/users/1</p>\n\n<p><img src=\"/assets/images/posts/2-03.png\" alt=\"2-03\" class=\"post-r-img\" /></p>\n\n<p>④ 编辑用户信息的页面: http://localhost:3000/users/1/edit</p>\n\n<p><img src=\"/assets/images/posts/2-04.png\" alt=\"2-04\" class=\"post-r-img\" /></p>\n\n<p>⑤ 创建用户后的用户索引页: http://localhost:3000/users</p>\n\n<p><img src=\"/assets/images/posts/2-05.png\" alt=\"2-05\" class=\"post-r-img\" /></p>\n\n<h4 id=\"2-为users设置路由\">2. 为Users设置路由</h4>\n\n<p><strong>PATH:</strong> rails/config/routes.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:users</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'users#index'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h4 id=\"3-了解rest\">3. 了解REST</h4>\n\n<p>1° Users控制器代码摘要:</p>\n\n<p><strong>PATH:</strong> rails/app/controllers/users_controller.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">UsersController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">def</span> <span class=\"nf\">index</span>\n    <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n  \n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n  \n  <span class=\"k\">def</span> <span class=\"nf\">new</span>\n    <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n  <span class=\"o\">...</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>① 可以看到Users控制器中有index,show,new,edit,create,update和destroy动作.</p>\n\n<p>② 有些动作直接渲染页面;有的动作只会修改数据库中保存的数据.</p>\n\n<p>2° Users资源生成的符合REST架构的路由</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>HTTP请求</th>\n      <th>URL</th>\n      <th>动作</th>\n      <th>作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>GET</td>\n      <td>/users</td>\n      <td>index</td>\n      <td>列出所有用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/1</td>\n      <td>show</td>\n      <td>显示ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/new</td>\n      <td>new</td>\n      <td>显示创建新用户的页面</td>\n    </tr>\n    <tr>\n      <td>POST</td>\n      <td>/users</td>\n      <td>create</td>\n      <td>创建新用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/1/edit</td>\n      <td>edit</td>\n      <td>显示ID为1的用户的编辑页面</td>\n    </tr>\n    <tr>\n      <td>PATCH</td>\n      <td>/users/1</td>\n      <td>update</td>\n      <td>更新ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>DELETE</td>\n      <td>/users/1</td>\n      <td>destroy</td>\n      <td>删除ID为1的用户</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>① REST是”表现层状态化”(REpresentational State Transfer)的简称.</p>\n\n<p>② REST使组件被模型化,变成资源(resource),可以创建(create),读取(read),更新(update)和删除(delete).这些操作与关系数据库中的CRUD操作和HTTP请求方法(POST,GET,PATCH,DELETE)对应.</p>\n\n<p>3° Users控制器index方法解析:</p>\n\n<p><strong>PAHT:</strong> rails/app/controllers/users_controller.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">UsersController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">def</span> <span class=\"nf\">index</span>\n    <span class=\"vi\">@users</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">all</span>\n  <span class=\"k\">end</span>\n  <span class=\"o\">...</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>① 代码中<code class=\"highlighter-rouge\">@users = User.all</code>让User模型从数据库中检索所有用户,然后把结果赋值给<code class=\"highlighter-rouge\">@users</code>变量.</p>\n\n<p>② User模型使用Rails中的Active Record的库后,User.all就能返回数据库中的所有用户:</p>\n\n<p><strong>PAHT:</strong> rails/app/models/user.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>③ 以<code class=\"highlighter-rouge\">@</code>开头的变量是实例变量,在视图中自动可用.即<code class=\"highlighter-rouge\">index.html.erb</code>视图中可以得到<code class=\"highlighter-rouge\">@users</code>变量:</p>\n\n<p><strong>PATH:</strong> rails/views/users/index.html.erb</p>\n\n<div class=\"language-erb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n<span class=\"cp\">&lt;%</span> <span class=\"vi\">@users</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">user</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;tr&gt;</span>\n  <span class=\"nt\">&lt;td&gt;</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"cp\">%&gt;</span><span class=\"nt\">&lt;/td&gt;</span>\n  ...\n<span class=\"nt\">&lt;/tr&gt;</span>\n<span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n...\n</code></pre></div></div>\n\n<h4 id=\"4-microposts资源\">4. Microposts资源</h4>\n\n<p>1° 使用脚手架创建Microposts资源:</p>\n\n<p><code class=\"highlighter-rouge\">$ rails generate scaffold Micropost content:text user_id:integer</code></p>\n\n<p>2° 迁移数据库:</p>\n\n<p><code class=\"highlighter-rouge\">$ rails db:migrate</code></p>\n\n<p>3° 脚手架会自动更新Rails的路由:</p>\n\n<p><strong>PAHT:</strong> rails/config/routes.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:microposts</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:users</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'users#index'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>其他内容与Users资源没什么区别.</p>\n\n<p>① 发布微博的页面: http://localhost:3000/microposts/new</p>\n\n<p><img src=\"/assets/images/posts/2-06.png\" alt=\"2-06\" class=\"post-r-img\" /></p>\n\n<p>② 微博索引页: http://localhost:3000/microposts</p>\n\n<p><img src=\"/assets/images/posts/2-07.png\" alt=\"2-07\" class=\"post-r-img\" /></p>\n\n<h4 id=\"5-限制微博的长度length\">5. 限制微博的长度(length)</h4>\n\n<p><strong>PAHT:</strong> rails/app/models/micropost.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Micropost</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:content</span><span class=\"p\">,</span> <span class=\"ss\">length: </span><span class=\"p\">{</span><span class=\"ss\">maximum: </span><span class=\"mi\">140</span><span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>① 当发布微博时输入字数超过140个字符时显示的错误信息:</p>\n\n<p><img src=\"/assets/images/posts/2-08.png\" alt=\"2-08\" class=\"post-r-img\" /></p>\n\n<h4 id=\"6-用户与微博\">6. 用户与微博</h4>\n\n<p>1° 一个用户拥有多篇微博:</p>\n\n<p><strong>PATH:</strong> rails/models/user.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:microposts</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>2° 一篇微博属于一个用户:</p>\n\n<p><strong>PAHT:</strong> rails/models/mircopost.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Micropost</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:user</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:content</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">:{</span><span class=\"ss\">maximum: </span><span class=\"mi\">140</span><span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>3° 查看微博和用户的关系:</p>\n\n<p>可以使用<code class=\"highlighter-rouge\">rails console</code>打开控制台,并使用<code class=\"highlighter-rouge\">exit</code>命令退出控制台:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>rails console\n<span class=\"o\">&gt;&gt;</span> first_user <span class=\"o\">=</span> User.first\n<span class=\"o\">=&gt;</span> <span class=\"c\">#&lt;User id:1,name:\"leonmin\",..&gt;</span>\n<span class=\"o\">&gt;&gt;</span> first_user.microposts\n<span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"c\">#&lt;Micropost id:1,content:\"First post\"..&gt;]</span>\n<span class=\"o\">&gt;&gt;</span> micropost <span class=\"o\">=</span> first_user.microposts.first\n<span class=\"o\">=&gt;</span> <span class=\"c\">#&lt;Micropost id:1,content:\"First post\"..&gt;</span>\n<span class=\"o\">&gt;&gt;</span> micropost.user\n<span class=\"o\">=&gt;</span> <span class=\"c\">#&lt;User id:1,name:\"leonmin\",..&gt;</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"nb\">exit</span>\n</code></pre></div></div>\n\n<h4 id=\"7-验证内容存在性presence\">7. 验证内容存在性(presence)</h4>\n\n<p><strong>PAHT:</strong> rails/app/models/micropost.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Micropost</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:user</span>\n  <span class=\"n\">validates</span> <span class=\"ss\">:content</span><span class=\"p\">,</span><span class=\"n\">length</span><span class=\"p\">:{</span><span class=\"ss\">maximum: </span><span class=\"mi\">140</span><span class=\"p\">},</span><span class=\"ss\">presence: </span><span class=\"kp\">true</span>\n</code></pre></div></div>\n\n<p><strong>PATH:</strong> rails/app/models/user.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:microposts</span>\n  <span class=\"n\">validate</span> <span class=\"ss\">:name</span><span class=\"p\">,</span><span class=\"ss\">presence: </span><span class=\"kp\">true</span>\n  <span class=\"n\">validate</span> <span class=\"ss\">:email</span><span class=\"p\">,</span><span class=\"ss\">presence: </span><span class=\"kp\">true</span>\n</code></pre></div></div>\n\n<h4 id=\"8-部署\">8. 部署</h4>\n\n<p>1° 部署到GitHub:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git status\n<span class=\"nv\">$ </span>git add <span class=\"nt\">-A</span>\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Add User and Micropost..\"</span>\n<span class=\"nv\">$ </span>git push\n</code></pre></div></div>\n\n<p>2° 部署到Heroku</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git push heroku\n<span class=\"nv\">$ </span>heroku run rails db:migrate\n</code></pre></div></div>\n\n<p><a>[Q1:可能git push heroku失败]</a></p>\n\n<p>3° 查看部署页面</p>\n\n<p>可以看到现在可以使用Heroku分配的二级域名访问网站:</p>\n\n<p><img src=\"/assets/images/posts/2-09.png\" alt=\"2-09\" class=\"post-r-img\" /></p>\n\n<hr />\n\n<div class=\"ques\">\n  [Q1: git push heroku 失败]\n</div>\n<p>(错误信息为:”fatal:unable to access ‘https://git.heroku.com/yag-rails-blog.git/’:SSL:no alternative certificate subject name matches target host name ‘git.heroku.com’”)</p>\n<div class=\"ans\">\n  [K1: SSH密钥]\n</div>\n<p>A: 可能的原因是没有添加SSH密钥,使用以下代码:\n<code class=\"highlighter-rouge\">$ heroku keys:add</code></p>\n\n"
    } ,
  
    {
      "title"    : "Ruby on Rails(搭建项目)",
      "category" : "ruby",
      "tags"     : "ruby",
      "url"      : "/ruby/2018/02/27/rails-blog-build.html",
      "date"     : "2018年2月27日",
      "content"  : "<div class=\"lm-tag-con\"><span class=\"lm-tag-key\">开发环境</span><span class=\"lm-tag-value\">Mac</span></div>\n<div class=\"lm-tag-con\"><span class=\"lm-tag-key\">开发编辑器</span><span class=\"lm-tag-value\">VS Code</span></div>\n<div class=\"lm-tag-con\"><span class=\"lm-tag-key\">ruby版本</span><span class=\"lm-tag-value\">2.4.2</span></div>\n<div class=\"lm-tag-con\"><span class=\"lm-tag-key\">rails版本</span><span class=\"lm-tag-value\">5.1.4</span></div>\n\n<h4 id=\"1-新建一个项目\">1. 新建一个项目</h4>\n\n<p><code class=\"highlighter-rouge\">$ rails new yag_rails_blog</code></p>\n\n<p>执行<code class=\"highlighter-rouge\">rails new</code>命令生成所有文件后,会自动执行<code class=\"highlighter-rouge\">bundle install</code>命令.</p>\n\n<p>生成的程序目录如下表:\n<!-- more --></p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">文件/文件夹</th>\n      <th style=\"text-align: left\">作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">app/</td>\n      <td style=\"text-align: left\">应用的核心文件,包括模型,视图,控制器等</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">app/assets</td>\n      <td style=\"text-align: left\">应用的静态资源文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">bin/</td>\n      <td style=\"text-align: left\">可执行的二进制文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">config/</td>\n      <td style=\"text-align: left\">应用的配置</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">db/</td>\n      <td style=\"text-align: left\">数据库文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">doc/</td>\n      <td style=\"text-align: left\">应用的文档</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">lib/</td>\n      <td style=\"text-align: left\">代码库模块文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">lib/assets</td>\n      <td style=\"text-align: left\">代码块的静态文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">log/</td>\n      <td style=\"text-align: left\">应用的日志文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">public/</td>\n      <td style=\"text-align: left\">公共可访问文件,如错误页面</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">bin/rails</td>\n      <td style=\"text-align: left\">生成代码,打开终端会话或启动本地服务器的程序</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">test/</td>\n      <td style=\"text-align: left\">应用的测试</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">tmp/</td>\n      <td style=\"text-align: left\">临时文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">vendor/</td>\n      <td style=\"text-align: left\">第三方代码,例如插件和gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">vendor/assets</td>\n      <td style=\"text-align: left\">第三方静态资源</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">README.md</td>\n      <td style=\"text-align: left\">应用简介</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Rakefile</td>\n      <td style=\"text-align: left\">使用rake命令执行的实用任务</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Gemfile</td>\n      <td style=\"text-align: left\">应用所需的gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Gemfile.lock</td>\n      <td style=\"text-align: left\">gem列表,确保这个应用的副本使用相同版本gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">config.ru</td>\n      <td style=\"text-align: left\">Rack中间件的配置文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">.gitignore</td>\n      <td style=\"text-align: left\">Git忽略的文件模式</td>\n    </tr>\n  </tbody>\n</table>\n\n<h5 id=\"修该项目中默认生成的gemfile文件\">修该项目中默认生成的Gemfile文件</h5>\n\n<p>1° 如果没有在gem指令中指定版本号,Bundler会自动安装最新版本:</p>\n\n<p><code class=\"highlighter-rouge\">gem 'sqlite3'</code></p>\n\n<p>2° 指定gem版本范围,在一定程度上控制Rails版本:</p>\n\n<p><code class=\"highlighter-rouge\">gem 'uglifier', '&gt;= 1.3.0'</code></p>\n\n<p>表示安装版本号大于等于1.3.0的uglifier.</p>\n\n<p><code class=\"highlighter-rouge\">gem 'coffee-rails', '~&gt; 4.0.0'</code></p>\n\n<p>表示安装版本号大于4.0.0但是小于4.1.0的coffee-rails.</p>\n\n<p>即<code class=\"highlighter-rouge\">&gt;=</code>表示始终安装最新版本;而<code class=\"highlighter-rouge\">~&gt;</code>表示安装最后一个数字变化的版本(比如4.0.0到4.0.1),不会安装前面的数字发生变化的更新(比如4.0到4.1).</p>\n\n<p>3° 使用精确的版本号,可以防止版本升级导致的程序错误.</p>\n\n<p>4° 修改Gemfile文件:</p>\n\n<p><strong>PATH:</strong> rails/Gemfile</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">gem</span> <span class=\"s1\">'rails'</span><span class=\"p\">,</span> <span class=\"s1\">'5.1.4'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'rake'</span><span class=\"p\">,</span> <span class=\"s1\">'12.3.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'bcrypt'</span><span class=\"p\">,</span> <span class=\"s1\">'3.1.11'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'faker'</span><span class=\"p\">,</span> <span class=\"s1\">'1.7.3'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'carrierwave'</span><span class=\"p\">,</span> <span class=\"s1\">'1.1.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'carrierwave-qiniu'</span><span class=\"p\">,</span> <span class=\"s1\">'1.1.5'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'mini_magick'</span><span class=\"p\">,</span> <span class=\"s1\">'4.7.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'fog'</span><span class=\"p\">,</span> <span class=\"s1\">'1.40.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'will_paginate'</span><span class=\"p\">,</span> <span class=\"s1\">'3.1.5'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'bootstrap-will_paginate'</span><span class=\"p\">,</span> <span class=\"s1\">'1.0.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jquery-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.3.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'bootstrap-sass'</span><span class=\"p\">,</span> <span class=\"s1\">'3.3.7'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'puma'</span><span class=\"p\">,</span> <span class=\"s1\">'3.9.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sass-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.6'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'uglifier'</span><span class=\"p\">,</span> <span class=\"s1\">'3.2.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'coffee-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.2.2'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'turbolinks'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jbuilder'</span><span class=\"p\">,</span> <span class=\"s1\">'2.7.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'platform-api'</span><span class=\"p\">,</span> <span class=\"s1\">'2.1.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'letsencrypt-rails-heroku'</span><span class=\"p\">,</span> <span class=\"s1\">'1.2.0'</span>\n\n<span class=\"n\">group</span> <span class=\"ss\">:development</span><span class=\"p\">,</span> <span class=\"ss\">:test</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span> <span class=\"s1\">'1.3.13'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'byebug'</span><span class=\"p\">,</span> <span class=\"ss\">platforms: </span><span class=\"p\">[</span><span class=\"ss\">:mri</span><span class=\"p\">,</span> <span class=\"ss\">:mingw</span><span class=\"p\">,</span> <span class=\"ss\">:x64_mingw</span><span class=\"p\">]</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'capybara'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt; 2.13'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'selenium-webdriver'</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">group</span> <span class=\"ss\">:development</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'web-console'</span><span class=\"p\">,</span> <span class=\"s1\">'3.5.1'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'listen'</span><span class=\"p\">,</span> <span class=\"s1\">'3.1.5'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring'</span><span class=\"p\">,</span> <span class=\"s1\">'2.0.2'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring-watcher-listen'</span><span class=\"p\">,</span> <span class=\"s1\">'2.0.1'</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">group</span> <span class=\"ss\">:test</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'rails-controller-testing'</span><span class=\"p\">,</span><span class=\"s1\">'1.0.2'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'minitest-reporters'</span><span class=\"p\">,</span><span class=\"s1\">'1.1.14'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'guard'</span><span class=\"p\">,</span><span class=\"s1\">'2.13.0'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'guard-minitest'</span><span class=\"p\">,</span><span class=\"s1\">'2.4.4'</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">group</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'pg'</span><span class=\"p\">,</span><span class=\"s1\">'0.20.0'</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">gem</span> <span class=\"s1\">'tzinfo-data'</span><span class=\"p\">,</span> <span class=\"ss\">platforms: </span><span class=\"p\">[</span><span class=\"ss\">:mingw</span><span class=\"p\">,</span> <span class=\"ss\">:mswin</span><span class=\"p\">,</span> <span class=\"ss\">:x64_mingw</span><span class=\"p\">,</span> <span class=\"ss\">:jruby</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>5° 使用<code class=\"highlighter-rouge\">bundle install</code>命令或者<code class=\"highlighter-rouge\">bundle update</code>命令安装这些gem.</p>\n<div class=\"ques\">\n  [Q1:  bundle install和bundle build的区别]\n</div>\n\n<p>6° 运行Rails服务器:</p>\n\n<p><code class=\"highlighter-rouge\">rails server</code></p>\n\n<p>本地服务器默认地址为 http://0.0.0.0:3000</p>\n\n<p>执行rails server命令后看到的</p>\n\n<p><img src=\"/assets/images/posts/1-01.png\" alt=\"1-01\" class=\"post-r-img\" /></p>\n\n<h4 id=\"2-版本控制\">2. 版本控制</h4>\n\n<h5 id=\"第一次使用仓库前的操作\">第一次使用仓库前的操作:</h5>\n\n<p>1° 初始化仓库:</p>\n\n<p><code class=\"highlighter-rouge\">$ git init</code></p>\n\n<p>2° 跟踪所有项目文件</p>\n\n<p><code class=\"highlighter-rouge\">$ git add -A</code></p>\n\n<p>3° 提交到本地仓库</p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -m \"Initialize repository and First commit\"</code></p>\n\n<p>4° 设置远程仓库</p>\n\n<p><code class=\"highlighter-rouge\">$ git remote add origin https://github.com/leonmin/yag-rails-blog.git</code></p>\n\n<p>5° 推送到远程仓库:</p>\n\n<p><code class=\"highlighter-rouge\">$ git push -u origin master</code></p>\n\n<p>还可以使用<code class=\"highlighter-rouge\">git status</code>查看当前文件状态.</p>\n<div class=\"ques\">\n  [Q2: git status简单使用]\n</div>\n\n<h4 id=\"3-使用heroku部署\">3. 使用Heroku部署</h4>\n\n<p>1° 检查Gemfile文件是否有以下gem:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">group</span> <span class=\"ss\">:development</span><span class=\"p\">,</span> <span class=\"ss\">:test</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span> <span class=\"s1\">'1.3.13'</span>\n  <span class=\"o\">...</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">group</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'pg'</span><span class=\"p\">,</span> <span class=\"s1\">'0.20.0'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>2° 安装gem,使用<code class=\"highlighter-rouge\">--without production</code>禁止本地环境安装生产环境使用的gem(即pg):</p>\n\n<p><code class=\"highlighter-rouge\">$ bundle install --without production</code></p>\n\n<p>3° <a href=\"https://signup.heroku.com/login\">注册Heroku账号</a><font color=\"#ccc\">(可能需要科学上网)</font></p>\n\n<p>4° 安装heroku-cli</p>\n\n<p>5° 使用heroku命令登录账号:</p>\n\n<p><code class=\"highlighter-rouge\">$ heroku login</code>  这里需要输入邮箱和密码,即上面注册时使用的邮箱密码.</p>\n\n<p>然后添加SSH密钥:</p>\n\n<p><code class=\"highlighter-rouge\">$ heroku keys:add</code></p>\n\n<p>6° 在Heroku中创建一个项目:</p>\n\n<p><code class=\"highlighter-rouge\">$ heroku create</code></p>\n\n<p>Heroku会为应用分配两个地址:</p>\n\n<p>一个二级域名(比如:https://arcane-cliffs-18573.herokuapp.com/),即应用部署的地址;</p>\n\n<p>一个git仓库地址(比如:https://git.heroku.com/arcane-cliffs-18573.git),这个仓库用于把本地仓库部署到heroku仓库上,heroku仓库远程仓库名默认为heroku.</p>\n\n<p>7° 部署应用</p>\n\n<p><code class=\"highlighter-rouge\">$ git push heroku master</code></p>\n\n<p>8° 查看页面</p>\n\n<p>可以使用Heroku为应用分配的二级域名访问,也可使用<code class=\"highlighter-rouge\">heroku open</code>命令访问部署后的页面.</p>\n\n<p>(PS:此时项目还没有内容,可能会显示找不到页面)</p>\n\n<p>9° heroku命令</p>\n\n<p><code class=\"highlighter-rouge\">$ heroku rename yag-rails-blog</code>  重命名应用</p>\n\n<p><code class=\"highlighter-rouge\">$ heroku logs</code>  查看最新日志</p>\n\n<hr />\n\n<div class=\"ques\">\n  [Q1: bundle install和bundle build的区别]\n</div>\n<div class=\"ans\">\n  [K1: 检查源]\n</div>\n<p>A: <code class=\"highlighter-rouge\">bundle update</code> 会去相应的源检查Gemfile里的gem更新,然后对比Gemfile.lock文件,如果Gemfile里没有指定的版本或是<code class=\"highlighter-rouge\">&gt;=</code>版本就会去相应的源下载安装新版本gem,然后更新Gemfile.lock文件;</p>\n\n<p><code class=\"highlighter-rouge\">bundle install</code> 会先检查Gemfile.lock文件以及相关依赖,然后为本地系统安装Gemfile.lock文件中指定的版本,接着检查Gemfile中有而Gemfile.lock中没有的,然后安装,不会去检查相关源的Gem版本更新.</p>\n\n<p>一般不建议使用<code class=\"highlighter-rouge\">bundle update</code>,可以使用<code class=\"highlighter-rouge\">bundle install</code>或者<code class=\"highlighter-rouge\">bundle update gem_name</code>.</p>\n\n<div class=\"ques\">\n  [Q2: git status简单使用]\n</div>\n<div class=\"ans\">\n  [K2: git status -s]\n</div>\n<p>A: 1.使用<code class=\"highlighter-rouge\">git status</code> 会显示以下信息:</p>\n\n<p>1° <code class=\"highlighter-rouge\">nothing to commit,working directory clean</code>  表示所有跟踪文件上次提交后都未被更改过;</p>\n\n<p>2° <code class=\"highlighter-rouge\">Untracked files:..</code>  列出文件未被跟踪;</p>\n\n<p>3° <code class=\"highlighter-rouge\">Changes to be committed:..</code>  列出文件被跟踪,且处于暂存状态;</p>\n\n<p>4° <code class=\"highlighter-rouge\">Changes not staged for commit:..</code>  已跟踪的文件的内容发生变化,但还没有放到暂存区;</p>\n\n<p>2.使用<code class=\"highlighter-rouge\">git status -s/--short</code>查看简洁的状态信息</p>\n\n<p>1° <code class=\"highlighter-rouge\">??</code>  未跟踪的文件</p>\n\n<p>2° <code class=\"highlighter-rouge\">A-</code>  新添加到暂存区的文件</p>\n\n<p>3° <code class=\"highlighter-rouge\">M-</code>  文件被修改并放到了暂存区</p>\n\n<p>4° <code class=\"highlighter-rouge\">-M</code>  文件被修改了但还没有放到暂存区</p>\n\n<p>5° <code class=\"highlighter-rouge\">MM</code>  文件被修改并且提交到暂存区后又被修改了</p>\n\n"
    } ,
  
    {
      "title"    : "位置阅读指示器",
      "category" : "limi",
      "tags"     : "css",
      "url"      : "/limi/2017/12/04/tool-01.html",
      "date"     : "2017年12月4日",
      "content"  : "<h4 id=\"位置阅读指示器\">位置阅读指示器</h4>\n\n<p>实现效果:</p>\n\n<p><img src=\"/assets/images/posts/locationindicator.jpg\" alt=\"\" class=\"post-r-img\" /></p>\n\n<!-- more -->\n\n<h4 id=\"html-code\">HTML CODE</h4>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;progress</span> <span class=\"na\">value=</span><span class=\"s\">\"0\"</span> <span class=\"na\">id=</span><span class=\"s\">\"progressBar\"</span> <span class=\"na\">class=</span><span class=\"s\">\"flat\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"progress-container\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"progress-bar\"</span><span class=\"nt\">&gt;</span>Wherrea<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/progress&gt;</span>\n</code></pre></div></div>\n\n<h4 id=\"css-code\">CSS CODE</h4>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.body</span><span class=\"p\">{</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"o\">*,</span> <span class=\"o\">*</span><span class=\"nd\">::after</span><span class=\"o\">,</span> <span class=\"o\">*</span><span class=\"nd\">::before</span> <span class=\"p\">{</span>\n  <span class=\"nl\">box-sizing</span><span class=\"p\">:</span> <span class=\"n\">border-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">progress</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* Positioning */</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span>\n  <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n\n  <span class=\"c\">/* Dimensions */</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">.25em</span><span class=\"p\">;</span>\n\n  <span class=\"c\">/* Reset the apperance */</span>  \n  <span class=\"nl\">-webkit-appearance</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n     <span class=\"nl\">-moz-appearance</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n          <span class=\"nl\">appearance</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n\n  <span class=\"c\">/* Get rid of the default border in Firefox/Opera. */</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n\n  <span class=\"c\">/* For Firefox/IE10+ */</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span>\n\n  <span class=\"c\">/* For IE10+, color of the progress bar */</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">progress</span><span class=\"nd\">::-webkit-progress-bar</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.progress-container</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span>\n  <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">.25em</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.progress-bar</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"nb\">inherit</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c\">/**\n *.flat deploy indicator color\n */</span>\n<span class=\"nc\">.flat</span><span class=\"nd\">::-webkit-progress-value</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">deepskyblue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.flat</span><span class=\"nd\">::-moz-progress-bar</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">deepskyblue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"javascript-code\">JAVASCRIPT CODE</h4>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">var</span> <span class=\"nx\">getMax</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">height</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">).</span><span class=\"nx\">height</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">var</span> <span class=\"nx\">getValue</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s1\">'max'</span> <span class=\"k\">in</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'progress'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Browser supports progress element</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">progressBar</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'progress'</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Set the Max attr for the first time</span>\n    <span class=\"nx\">progressBar</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">({</span>\n      <span class=\"na\">max</span><span class=\"p\">:</span> <span class=\"nx\">getMax</span><span class=\"p\">()</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'scroll'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// On scroll only Value attr needs to be calculated</span>\n      <span class=\"nx\">progressBar</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">({</span>\n        <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">getValue</span><span class=\"p\">()</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">).</span><span class=\"nx\">resize</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// On resize, both Max/Value attr needs to be calculated</span>\n      <span class=\"nx\">progressBar</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">({</span>\n        <span class=\"na\">max</span><span class=\"p\">:</span> <span class=\"nx\">getMax</span><span class=\"p\">(),</span>\n          <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">getValue</span><span class=\"p\">()</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">progressBar</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.progress-bar'</span><span class=\"p\">),</span>\n      <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">getMax</span><span class=\"p\">(),</span>\n      <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">width</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">getWidth</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Calculate width in percentage</span>\n      <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">getValue</span><span class=\"p\">();</span>\n      <span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">/</span> <span class=\"nx\">max</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n      <span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"nx\">width</span> <span class=\"o\">+</span> <span class=\"s1\">'%'</span><span class=\"p\">;</span>\n      <span class=\"k\">return</span> <span class=\"nx\">width</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">setWidth</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">progressBar</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">({</span>\n        <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"nx\">getWidth</span><span class=\"p\">()</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'scroll'</span><span class=\"p\">,</span> <span class=\"nx\">setWidth</span><span class=\"p\">);</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'resize'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Need to reset the Max attr</span>\n      <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">getMax</span><span class=\"p\">();</span>\n      <span class=\"nx\">setWidth</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<p><a href=\"https://css-tricks.com/reading-position-indicator/\" target=\"_blank\">参考链接(https://css-tricks.com/reading-position-indicator/)</a></p>\n"
    } ,
  
    {
      "title"    : "Ruby on Rails(玩具应用)",
      "category" : "ruby",
      "tags"     : "ruby",
      "url"      : "/ruby/2017/11/25/ruby-on-rails-02.html",
      "date"     : "2017年11月25日",
      "content"  : "<h4 id=\"1-规划应用\">1. 规划应用</h4>\n\n<p>(1) 搭建项目:</p>\n\n<p><code class=\"highlighter-rouge\">rails new toy_app</code></p>\n\n<p>(2) 修改Gemfile文件:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">source</span> <span class=\"s1\">'https://rubygems.org'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'rails'</span><span class=\"p\">,</span> <span class=\"s1\">'5.1.2'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'puma'</span><span class=\"p\">,</span> <span class=\"s1\">'3.9.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sass-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.6'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'uglifier'</span><span class=\"p\">,</span> <span class=\"s1\">'3.2.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'coffee-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.2.2'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jquery-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.3.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'turbolinks'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jbuilder'</span><span class=\"p\">,</span> <span class=\"s1\">'2.7.0'</span>\n<span class=\"n\">group</span> <span class=\"ss\">:development</span><span class=\"p\">,</span> <span class=\"ss\">:test</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span><span class=\"s1\">'1.3.13'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'byebug'</span><span class=\"p\">,</span><span class=\"s1\">'9.0.6'</span><span class=\"p\">,</span><span class=\"ss\">platform: :mri</span>\n<span class=\"k\">end</span>\n<span class=\"n\">group</span> <span class=\"ss\">:development</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'web-console'</span><span class=\"p\">,</span><span class=\"s1\">'3.5.1'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'listen'</span><span class=\"p\">,</span><span class=\"s1\">'3.0.8'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring'</span><span class=\"p\">,</span><span class=\"s1\">'2.0.2'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring-watcher-listen'</span><span class=\"p\">,</span><span class=\"s1\">'2.0.1'</span>\n<span class=\"k\">end</span>\n<span class=\"n\">group</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'pg'</span><span class=\"p\">,</span><span class=\"s1\">'0.20.0'</span>\n<span class=\"k\">end</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'tzinfo-data'</span><span class=\"p\">,</span><span class=\"n\">platforms</span><span class=\"p\">:[</span><span class=\"ss\">:mingw</span><span class=\"p\">,</span><span class=\"ss\">:mswin</span><span class=\"p\">,</span><span class=\"ss\">:x64_mingw</span><span class=\"p\">,</span><span class=\"ss\">:jruby</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<!-- more -->\n\n<p>(3) 安装gem:</p>\n\n<p><code class=\"highlighter-rouge\">$ bundle install —without production</code></p>\n\n<p>(4) 纳入控制版本:</p>\n\n<p><code class=\"highlighter-rouge\">$ git init</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git add -A</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -m 'Initalize repository'</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git remote add origin git@github.com:leomin/toy_app.git</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git push -u origin —all</code></p>\n\n<p>(5) 在Application控制器中添加hello动作:</p>\n\n<p><strong>PATH:</strong>rails/app/controllers/application_controller.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ApplicationController</span> <span class=\"o\">&lt;</span><span class=\"no\">ActionController</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">protect_form_forgery</span> <span class=\"ss\">with: :exception</span>\n  <span class=\"k\">def</span> <span class=\"nf\">hello</span>\n    <span class=\"n\">render</span> <span class=\"ss\">html: </span><span class=\"s2\">\"hello,world!\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>(6) 设置根路由:</p>\n\n<p><strong>PATH:</strong>rails/config/routes.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'application#hello'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>(7) 提交改动,推送到Heroku中:</p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -am \"Add hello\"</code></p>\n\n<p><code class=\"highlighter-rouge\">$  heroku create</code></p>\n\n<p><code class=\"highlighter-rouge\">git push heroku master</code></p>\n\n<p>  1° User模型</p>\n\n<p>users:id(integer),name(string),email(string);</p>\n\n<p>  2° Micropost模型</p>\n\n<p>microposts:id(integer),content(text),user_id(integer);</p>\n\n<h4 id=\"2-users资源\">2. Users资源</h4>\n\n<p>把scaffold传给rails generate命令就可以使用Rails脚手架,传给scaffold的参数是资源名的单数形式.后面可以跟一些可选参数,指定数据模型中的字段:</p>\n\n<p><code class=\"highlighter-rouge\">$ rails generate scaffold User name:string email:string</code></p>\n\n<p>注意:没必要指定id字段,Rails会自动创建并将其设为表的主键.</p>\n\n<p>接下来用<code class=\"highlighter-rouge\">rails db:migrate</code>命令迁移(migrate)数据库,</p>\n\n<p><code class=\"highlighter-rouge\">$ rails db:migrate</code></p>\n\n<p>上面的命令作用是:使用新的User数据模型更新数据库.</p>\n\n<p>注意:在Rails5以前的版本中,db:migrate命令使用rake执行,而不是rails.</p>\n\n<p><strong>Rake</strong></p>\n\n<p>在Rails之前,Ruby on Rails大量使用Rake.Rails中最常用的两个Rake命令是你<code class=\"highlighter-rouge\">rake db:migrate</code>(迁移数据库,更新数据模型)和<code class=\"highlighter-rouge\">rake test</code>(运行自动化测试组件).使用Rake时,要确保使用的Rails应用Gemfile文件中指定的版本,方法是使用Bundler提供的bundle exec命令,因此执行迁移的<code class=\"highlighter-rouge\">rails db:migrate</code>命令要写成:</p>\n\n<p><code class=\"highlighter-rouge\">$ bundle exec rake db:migrate</code></p>\n\n<p>打开一个终端标签页,运行本地Web服务器:</p>\n\n<p><code class=\"highlighter-rouge\">$ rails server -b $IP -p $PORT</code></p>\n\n<p>(1) 浏览用户相关的页面</p>\n\n<p>脚手架生成Users资源时生成很多用来处理用户的页面.比如:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>URL</th>\n      <th style=\"text-align: center\">动作</th>\n      <th>作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>/users</td>\n      <td style=\"text-align: center\">index</td>\n      <td>列出所有用户</td>\n    </tr>\n    <tr>\n      <td>/users/1</td>\n      <td style=\"text-align: center\">show</td>\n      <td>显示ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>/users/new</td>\n      <td style=\"text-align: center\">new</td>\n      <td>创建新用户</td>\n    </tr>\n    <tr>\n      <td>/users/1/edit</td>\n      <td style=\"text-align: center\">edit</td>\n      <td>编辑ID为1的用户</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>(2) MVC实战</p>\n\n<p>分析在浏览器中访问用户索引页(/users)的过程.</p>\n\n<p>  1° 浏览器向<code class=\"highlighter-rouge\">/users</code>发送请求</p>\n\n<p>  2° Rails的路由把<code class=\"highlighter-rouge\">/users</code>交给Users控制器的index动作处理</p>\n\n<p>  3° index动作要求User模型检索所有用户(User.all)</p>\n\n<p>  4° User模型从数据库中读取所有用户</p>\n\n<p>  5° User模型把所有用户组成的列表返回给控制器</p>\n\n<p>  6° 控制器把所有用户赋值给@users变量,然后传入index视图</p>\n\n<p>  7° 视图使用嵌入式Ruby把页面渲染成HTML</p>\n\n<p>  8° 控制器把HTML送回浏览器</p>\n\n<p>Rails路由,为Users资源定义了一条规则</p>\n\n<p><strong>PATH:</strong>rails/config/routes.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">route</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:users</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'users#index'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Users资源生成的符合REST架构的路由</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>HTTP请求</th>\n      <th>URL</th>\n      <th style=\"text-align: center\">动作</th>\n      <th>作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>GET</td>\n      <td>/users</td>\n      <td style=\"text-align: center\">index</td>\n      <td>列出所有用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/1</td>\n      <td style=\"text-align: center\">show</td>\n      <td>显示ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/new</td>\n      <td style=\"text-align: center\">new</td>\n      <td>显示创建新用户的页面</td>\n    </tr>\n    <tr>\n      <td>POST</td>\n      <td>/users</td>\n      <td style=\"text-align: center\">create</td>\n      <td>创建新用户</td>\n    </tr>\n    <tr>\n      <td>GET</td>\n      <td>/users/1/edit</td>\n      <td style=\"text-align: center\">edit</td>\n      <td>显示ID为1的用户的编辑页面</td>\n    </tr>\n    <tr>\n      <td>PATCH</td>\n      <td>/users/1</td>\n      <td style=\"text-align: center\">update</td>\n      <td>更新ID为1的用户</td>\n    </tr>\n    <tr>\n      <td>DELETE</td>\n      <td>/users/1</td>\n      <td style=\"text-align: center\">destroy</td>\n      <td>删除ID为1的用户</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><br /></p>\n\n<p><strong>表现层状态转化(REST)</strong></p>\n\n<p>REST是一种架构风格,用于开发分布式,基于网络的系统和软件应用,例如万维网和Web应用,REST理论很抽象,在Rails应用中,REST意味着大多数组件(例如用户和微博)都被模型化,变成资源(resource),可以创建(create),读取(read),更新(update)和删除(delete).这些操作与关系模型数据库中的CRUD操作和HTTP请求方法(POST,GET,PATCH和DELETE对应).</p>\n"
    } ,
  
    {
      "title"    : "JavaScript设计模式--代理模式",
      "category" : "javascript",
      "tags"     : "javascript",
      "url"      : "/javascript/2017/11/23/javascript-dp-03.html",
      "date"     : "2017年11月23日",
      "content"  : "<p>代理模式是为一个对象提供一个代用品或占位符,以便控制对它的访问.</p>\n\n<p>代理模式的关键是,当客户不方便直接访问一个对象或者不满足需要的时候,提供一个替身对象来控制这个对象的访问,客户实际上访问的是替身对象.替身对象对请求做出一些处理之后,再把请求交给本体对象.</p>\n\n<h4 id=\"1-一个例子\">1. 一个例子</h4>\n\n<p>小明喜欢A,小明决定送A一束花来表白,刚好小明知道A和他有共同的朋友B,于是内心的小明决定让B来代替自己送花这件事情.</p>\n\n<!-- more -->\n\n<p>但小明自己送和让B帮小明送有什么区别?因为B比小明更了解A,会选择更好的时机(比如A心情好)送花给A,结果会更好:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Flower</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">xiaoming</span> <span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"na\">sendFlower</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">flower</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Flower</span><span class=\"p\">();</span>\n    <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">receiveFlower</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">B</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">receiveFlower</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">){</span>\n    <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">listenGoodMood</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"c1\">//监听A的好心情</span>\n      <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">receiveFlower</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">receiveFlower</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'收到花'</span> <span class=\"o\">+</span> <span class=\"nx\">flower</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">listenGoodMood</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">){</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"nx\">fn</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">xiaoming</span><span class=\"p\">.</span><span class=\"nx\">sendFlower</span><span class=\"p\">(</span><span class=\"nx\">B</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h4 id=\"2-保护代理和虚拟代理\">2. 保护代理和虚拟代理</h4>\n\n<p>保护代理可以过滤掉一些请求;</p>\n\n<p>虚拟代理可以把一些开销很大的对象,延迟到真正需要它的时候才创建:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">B</span> <span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"na\">receiveFlower</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">){</span>\n    <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">listenGoodMood</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"c1\">//监听A的好心情</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">flower</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Flower</span><span class=\"p\">();</span><span class=\"c1\">//延迟创建flower对象</span>\n      <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">receiverFlower</span><span class=\"p\">(</span><span class=\"nx\">flower</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>保护代理用于控制不同权限的对象目标的访问,但在JavaScript并不容易实现保护代理,因为无法判断谁访问了某个对象.</p>\n\n<h4 id=\"3-虚拟代理实现图片预加载\">3. 虚拟代理实现图片预加载</h4>\n\n<p>在web开发中,图片预加载时一种常用的技术,如果直接给某个img标签设置src属性,由于图片过大或者网络不佳,图片的位置往往有段时间会是一段空白.常用的做法是先用一张loading图片占位,然后用异步的方法加载图片,等图片加载好了再把它填充到img节点里,这种场景就很适合使用虚拟代理.</p>\n\n<p>首先创建一个普通的本体对象,这个对象负责网页面中创建一个img对象,并且提供一个对外的setSrc接口,外界调用这个接口,便可以给img标签设置src属性:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">myImage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">imgNode</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'img'</span><span class=\"p\">);</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">imgNode</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">setSrc</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">){</span>\n      <span class=\"nx\">imgNode</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">src</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">myImage</span><span class=\"p\">.</span><span class=\"nx\">setSrc</span><span class=\"p\">(</span><span class=\"s1\">'http://imgcache.qq.com/music/photo/k/000GGDys0yA0NK.jpg'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>现在引入代理对象proxyImage,通过这个代理对象,在图片被真正加载好之前,页面将出现一张占位的菊花图loading .gif,来提示用户图片正在加载:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">myImage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">imgNode</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'img'</span><span class=\"p\">);</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">imgNode</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">setSrc</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">){</span>\n      <span class=\"nx\">imgNode</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">src</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">proxyImage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">;</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">myImage</span><span class=\"p\">.</span><span class=\"nx\">setSrc</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">src</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">setSrc</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">){</span>\n      <span class=\"nx\">myImage</span><span class=\"p\">.</span><span class=\"nx\">setSrc</span><span class=\"p\">(</span><span class=\"s1\">'file:// /C:/Users/../loading.gif'</span><span class=\"p\">);</span>\n      <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">src</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">proxyImage</span><span class=\"p\">.</span><span class=\"nx\">setSrc</span><span class=\"p\">(</span><span class=\"s1\">'http://imgcache.qq.com/../fasf.jpg'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h4 id=\"4-代理的意义\">4. 代理的意义</h4>\n\n<p>不用代理的预加载图片函数实现:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">MyImage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">imgNode</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'img'</span><span class=\"p\">);</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">imgNode</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">;</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">imgNode</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">setSrc</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">src</span><span class=\"p\">){</span>\n      <span class=\"nx\">imgNode</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">'file:// /C:/../loading.gif'</span><span class=\"p\">;</span>\n      <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">src</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">MyImage</span><span class=\"p\">.</span><span class=\"nx\">setSrc</span><span class=\"p\">(</span><span class=\"s1\">'http://imgcache.qq.com/../dfs.jpg'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>这里为了说明代理的意义,引入一个面向对象设计的原则–单一职责原则.</p>\n\n<p>单一职责原则指的是,就一个类(通常也包括对象和函数等)而言,应该仅有一个引起它变化的原因.如果一个对象承担了多项职责,就意味着这个对象将变得巨大,引起它变化的原因可能会有多个.</p>\n\n<p>面向对象设计鼓励将行为分布到细粒度的对象中,如果一个对象承担的责任过多,等于把这些职责耦合到了一起,这种耦合会导致脆弱和低内聚的设计.</p>\n\n<p>职责被定义为”引起变化的原因”.上段代码中的MyImage对象除了负责给img节点设置src外,还负责预加载图片.我们在处理一个职责时,可能因为其强耦合性影响另外一个职责的实现.</p>\n\n<p>代理的作用在这里体现出来了:代理负责预加载图片,预加载的操作完成之后,把请求重新交给本体MyImage.</p>\n\n<p>纵观整个程序,并没有改变或者增加MyImage的接口,但是通过代理对象,实际上给系统添加了新的行为.这是符合开放-封闭原则的.</p>\n\n<h4 id=\"5-代理和本体接口的一致性\">5. 代理和本体接口的一致性</h4>\n\n<p>案例中代理对象和本体都对外提供了setSrc方法,在客户看来,代理对象和本体是一致的,代理接收请求的过程对用户来说是透明的,用户并不清除代理和本体的区别,这样做有两个好处:</p>\n\n<p>(1) 用户可以放心地请求代理,他只关心是否能得到想要的结果;</p>\n\n<p>(2) 在任何使用本体的地方都可以替换成使用代理.</p>\n\n<p>在Java等语言中,代理和本体都需要显示地实现同一个接口,一方面接口保证了它们会用眼同样的方法.另一方面,面向接口编程迎合依赖倒置原则,通过接口进行向上转型,从而避开编译器的类型检查,代理和本体将来可以被替换使用.</p>\n\n<p>在JavaScript这种动态类型语言中,我们有时通过鸭子类型来检测代理和本体是否都实现了setSrc方法.</p>\n\n<p>如果代理对象和本体对象都为一个函数(函数也是对象),函数必然都能被执行,则可以认为它们具有一致的”接口”.</p>\n\n<h4 id=\"6-虚拟代理合并http请求\">6. 虚拟代理合并HTTP请求</h4>\n\n<p>在web开发中,也许最大的开销就是网络请求.假设做一个文件同步功能,当我们选择一个checkbox的时候,它对应的文件就会被同步到另外一台备用服务器上面:</p>\n\n<p>现将页面放置好这些checkbx节点:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">id=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>1\n  ...\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div></div>\n\n<p>然后给这些checkbox绑定点击事件,并且在点击的同时往另一台服务器同步文件:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">synchronousFile</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'开始同步文件,id为: '</span> <span class=\"o\">+</span> <span class=\"nx\">id</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">checkbox</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">);</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">c</span><span class=\"p\">;</span><span class=\"nx\">c</span><span class=\"o\">=</span><span class=\"nx\">checkbox</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">];){</span>\n  <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">onlick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checked</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"p\">){</span>\n      <span class=\"nx\">synchronousFile</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>可以预见,如此频繁的网络请求会带来相当大的开销.</p>\n\n<p>解决方案时,通过一个代理函数proxySynchronousFile来收集一段时间之间的请求,最后一次性发给服务器.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">sychronousFile</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'开始同步文件,id为: '</span> <span class=\"o\">+</span> <span class=\"nx\">id</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">proxySynchronousFile</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span><span class=\"p\">[],</span><span class=\"c1\">//保存一段时间内需要同步的ID</span>\n      <span class=\"nx\">timer</span><span class=\"p\">;</span><span class=\"c1\">//定时器</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">){</span>\n    <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">timer</span><span class=\"p\">){</span><span class=\"c1\">//保证不会覆已经启动的定时器</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">timer</span> <span class=\"o\">=</span> <span class=\"nx\">setTimerout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"nx\">synchronousFile</span><span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">));</span><span class=\"c1\">//2s后想本体发送需要同步的ID集合</span>\n      <span class=\"nx\">clearTimeout</span><span class=\"p\">(</span><span class=\"nx\">timer</span><span class=\"p\">);</span><span class=\"c1\">//清空定时器</span>\n      <span class=\"nx\">timer</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n      <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"c1\">//清空ID集合</span>\n    <span class=\"p\">},</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">checkbox</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">);</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">c</span><span class=\"p\">;</span><span class=\"nx\">c</span> <span class=\"o\">=</span><span class=\"nx\">checkbox</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">];){</span>\n  <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">checked</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"p\">){</span>\n      <span class=\"nx\">proxySynchronousFile</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h4 id=\"7-虚拟代理在惰性加载中的应用\">7. 虚拟代理在惰性加载中的应用</h4>\n\n<p>开源项目miniConsole.js:</p>\n\n<p>未加载真正的miniConsole.js之前的代码如下:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span><span class=\"p\">[];</span>\n<span class=\"kd\">var</span> <span class=\"nx\">miniConsole</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">log</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"kr\">arguments</span><span class=\"p\">;</span>\n    <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">miniConsole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">miniConsole</span><span class=\"p\">,</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">miniConsole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>当用户按下F2时,开始加载真正的miniConsole.js:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">113</span><span class=\"p\">){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">script</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'script'</span><span class=\"p\">);</span>\n    <span class=\"nx\">script</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">fn</span><span class=\"p\">;</span><span class=\"nx\">fn</span><span class=\"o\">=</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">];){</span>\n        <span class=\"nx\">fn</span><span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n    <span class=\"nx\">script</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">'miniConsole.js'</span><span class=\"p\">;</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">'head'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">scirpt</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'keydown'</span><span class=\"p\">,</span><span class=\"nx\">handler</span><span class=\"p\">,</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"c1\">//miniConsole.js代码</span>\n<span class=\"nx\">minConsole</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">log</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kr\">arguments</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>整理miniConsole代理对象的代码,使它成为一个标准的虚拟代理对象:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">miniConsole</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span><span class=\"p\">[];</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">handler</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">ev</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">113</span><span class=\"p\">){</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">script</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'script'</span><span class=\"p\">);</span>\n      <span class=\"nx\">script</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">fn</span><span class=\"p\">;</span><span class=\"nx\">fn</span><span class=\"o\">=</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">];){</span>\n          <span class=\"nx\">fn</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">};</span>\n      <span class=\"nx\">script</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">'miniConsole.js'</span><span class=\"p\">;</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s1\">'head'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">script</span><span class=\"p\">);</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">'keydown'</span><span class=\"p\">,</span><span class=\"nx\">handler</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'keydown'</span><span class=\"p\">,</span><span class=\"nx\">handler</span><span class=\"p\">,</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">log</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"kr\">arguments</span><span class=\"p\">;</span>\n      <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n        <span class=\"k\">return</span> <span class=\"nx\">miniConsole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">miniConsole</span><span class=\"p\">,</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">miniConsole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">);</span>\n<span class=\"c1\">//miniConsole.js代码</span>\n<span class=\"nx\">miniConsole</span><span class=\"p\">{</span>\n  <span class=\"na\">log</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"p\">...</span>\n    <span class=\"nx\">conosole</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kr\">arguments</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h4 id=\"8-缓存代理\">8. 缓存代理</h4>\n\n<p>缓存代理可以为一些开销大的运算结果提供暂时的存储,在下次运算前,如果传进来的参数与之前一致,则可以直接返回前面存储的运算结果.</p>\n\n<p>(1) 缓存代理的例子—计算乘积</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">mult</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'开始计算乘积'</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">l</span><span class=\"o\">=</span><span class=\"kr\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">l</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"nx\">a</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"o\">*</span><span class=\"kr\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">mult</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"c1\">//6;</span>\n<span class=\"nx\">mult</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"c1\">//24</span>\n</code></pre></div></div>\n\n<p>现在加入缓存代理函数:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">proxyMult</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span><span class=\"p\">[];</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kr\">arguments</span><span class=\"p\">,</span><span class=\"s1\">','</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">args</span> <span class=\"k\">in</span> <span class=\"nx\">cache</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">mult</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span><span class=\"kr\">arguments</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nx\">proxyMult</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"c1\">//24</span>\n<span class=\"nx\">proxyMult</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"c1\">//24</span>\n</code></pre></div></div>\n<p>(2) 缓存代理用于ajax异步请求数据</p>\n\n<h4 id=\"9-用高阶函数动态创建代理\">9. 用高阶函数动态创建代理</h4>\n\n<p>通过传入高阶函数这种更灵活的方式,可以为各种计算方法创建缓存代理.这些计算方法被当作参数传入一个专门用于创建缓存代理的工厂中.这样就可以为乘法,加法,减法等创建缓存代理:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">mult</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">l</span><span class=\"o\">=</span><span class=\"kr\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">l</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"nx\">a</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"o\">*</span><span class=\"kr\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n<span class=\"p\">};</span><span class=\"c1\">//乘法</span>\n<span class=\"kd\">var</span> <span class=\"nx\">plus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">l</span><span class=\"o\">=</span><span class=\"kr\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">l</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"nx\">a</span><span class=\"o\">=</span><span class=\"nx\">a</span><span class=\"o\">+</span><span class=\"kr\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n<span class=\"p\">};</span><span class=\"c1\">//加法</span>\n<span class=\"kd\">var</span> <span class=\"nx\">createProxyFactory</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span><span class=\"p\">{};</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"kr\">arguments</span><span class=\"p\">,</span><span class=\"s1\">','</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">args</span> <span class=\"k\">in</span> <span class=\"nx\">cache</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span><span class=\"kr\">arguments</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">proxyMult</span> <span class=\"o\">=</span> <span class=\"nx\">createProxyFactory</span><span class=\"p\">(</span><span class=\"nx\">mult</span><span class=\"p\">),</span>\n    <span class=\"nx\">proxyPlus</span> <span class=\"o\">=</span> <span class=\"nx\">createProxyFactory</span><span class=\"p\">(</span><span class=\"nx\">plus</span><span class=\"p\">);</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">proxyMult</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">proxyMult</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">proxyPlus</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">proxyPlus</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<h4 id=\"10-其他代理模式\">10. 其他代理模式</h4>\n\n<p>(1) 防火墙代理: 控制网络资源的访问;</p>\n\n<p>(2) 远程代理: 为一个对象在不同的地址空间提供局部代表;</p>\n\n<p>(3) 保护代理: 用于对象应该有不同的访问权限的情况;</p>\n\n<p>(4) 智能引用代理:  取代了简单的指针,它在访问对象时执行一些附加操作,比如计算一个对象被引用的次数;</p>\n\n<p>(5) 写时复制代理: 通常用于复制一个庞大的对象的情况.写时复制代理延迟了复制的过程,当对象被真正地修改时,才对它进行复制操作.是虚拟代理的一种变体,DLL是典型运用场景.</p>\n\n<h4 id=\"11-小结\">11. 小结</h4>\n\n<p>编写业务时,往往不需要去预先猜测是否需要使用代理模式.当真正发现不方便直接访问某个对象的时候,再编写代理也不迟.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-5-TypeScirpt",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/22/angular-05-ts.html",
      "date"     : "2017年11月22日",
      "content"  : "<h4 id=\"1-angular是用typescript构建的\">1. Angular是用TypeScript构建的</h4>\n\n<p>TypeScript并不是一门全新的语言,而是ES6的超集.所有的ES6代码都是完全可以编译的TypeScript代码.</p>\n\n<h4 id=\"2-typescript特性\">2. TypeScript特性</h4>\n\n<p>(1) 类型</p>\n\n<p>(2) 类</p>\n\n<p>(3) 注解</p>\n\n<p>(4) 模块导入</p>\n\n<p>(5) 语言工具包</p>\n\n<!-- more -->\n\n<h4 id=\"3-类型\">3. 类型</h4>\n\n<p>顾名思义,相对于ES6,TypeScript最大的改善是增加了类型系统.</p>\n\n<p>类型检查的优点:</p>\n\n<p>(1) 有助于代码的编码,因为它可以在编译期预防bug;</p>\n\n<p>(2) 有助于代码的阅读,因为它可以清晰地表明你的意图.</p>\n\n<p>TypeScript中的类型是可选的,如写快速或功能原型,可以先省略类型,然后在随着代码日趋成熟逐渐加上类型.</p>\n\n<p>TypeScript的新语法是从ES5自然演化而来的,仍沿用var来定义变量,但现在可以同时为变量名提供可选的变量类型.</p>\n\n<p><code class=\"highlighter-rouge\">var name: string</code></p>\n\n<p>在声明函数时,也可以为函数参数和返回值指定类型:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">greetText</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span><span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">\"Hello \"</span><span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>greetText函数在括号后还有一个新语法<code class=\"highlighter-rouge\">: string</code>.冒号之后指定的是该函数的返回值类型.这很有用,因为当让函数返回一个非string型的返回值,编译器就会告诉我们这里有错误;使用该函数的开发人员也能很清楚自己将会拿到什么类型的数据.</p>\n\n<p><strong>尝试REPL</strong></p>\n\n<p>安装一个小工具,名为TSUN(TypeScript Upgraded Node,支持TypeScript的升级版Node):</p>\n\n<p><code class=\"highlighter-rouge\">$ npm install -g tsun</code></p>\n\n<p>启动:</p>\n\n<p><code class=\"highlighter-rouge\">$ tsun</code></p>\n\n<h4 id=\"4-内置类型\">4. 内置类型</h4>\n\n<p>(1) 字符串</p>\n\n<p>字符串包含文本,声明为string类型:</p>\n\n<p><code class=\"highlighter-rouge\">var name: string = 'Filpe';</code></p>\n\n<p>(2) 数字</p>\n\n<p>在TypeScript中所有的数字都是用浮点数表示的,类型是number:</p>\n\n<p><code class=\"highlighter-rouge\">var age: number = 36;</code></p>\n\n<p>(3) 布尔类型</p>\n\n<p><code class=\"highlighter-rouge\">var married: boolean = true;</code></p>\n\n<p>(4) 数组</p>\n\n<p>可以使用Array<type>或者type[]语法来指定元素类型:</type></p>\n\n<p><code class=\"highlighter-rouge\">var jobs: Array&lt;string&gt; = ['IBM','Microsoft'];</code></p>\n\n<p><code class=\"highlighter-rouge\">var jobs: string[] =['Apple','Dell'];</code></p>\n\n<p>(5) 枚举</p>\n\n<p>枚举是一组可命名数组的集合:</p>\n\n<p><code class=\"highlighter-rouge\">enum Role {Employee = 0,Manager,Admin};</code></p>\n\n<p><code class=\"highlighter-rouge\">var role: Role = Role.Employee;</code></p>\n\n<p>默认情况下,枚举类型的初始值为0.</p>\n\n<p>(6) 任意类型</p>\n\n<p>如果没有为变量指定类型,那它的默认类型就是any.在TypeScript中,any类型的变量能够接收任意类型的数据:</p>\n\n<p><code class=\"highlighter-rouge\">var something: any = 'as string';</code></p>\n\n<p><code class=\"highlighter-rouge\">something = 1</code></p>\n\n<p>(7) “无”类型</p>\n\n<p>void意味着我们不期望那里有类型.它通常作为函数的返回值,表示没有任何返回值:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">setName</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"k\">void</span><span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"5-类\">5. 类</h4>\n\n<p>JavaScript ES5采用基于原型的面向对象设计.在ES6中,有内置的类.使用class关键字定义一个类,紧随其后的是类名和代码块:</p>\n\n<p><code class=\"highlighter-rouge\">class vehicle{}</code></p>\n\n<p>类可以包含属性,方法以及构造函数.</p>\n\n<p>(1) 属性</p>\n\n<p>属性定义了类实例对象的数据.类中的每个属性都可以包含一个可选的类型.</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Person</span><span class=\"p\">{</span>\n  <span class=\"nl\">first_name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">age</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>(2) 方法</p>\n\n<p>方法时运行在类对象实例上下文中的函数.在调用对象的方法前,必须要有这个对象的实例.</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Person</span><span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">age</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n  <span class=\"nx\">greet</span><span class=\"p\">(){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>如果没有显式声明过方法的返回类型和返回值,就会假定它可能返回任何东西(即any类型).这了没有任何显式的return语句,所以实际返回的类型是void.</p>\n\n<p>注意:void类型也是一种合法的any类型.</p>\n\n<p>调用greet方法前,需要实例化一个Person类的实例对象:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">p</span> <span class=\"p\">:</span><span class=\"nx\">Person</span><span class=\"p\">;</span>\n<span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Felipe'</span><span class=\"p\">;</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">greet</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>(3) 构造函数</p>\n\n<p>构造函数时当类进行实例化时执行的特殊函数.通常会在构造函数中对新对象进行初始化工作.</p>\n\n<p>构造函数必须命名为constructor.因为构造函数是在类被实例化时调用的,所以它们可以有输入参数,但不能有返回值.</p>\n\n<p>当类没有显示地定义构造函数时,将自动创建一个无参数构造函数.</p>\n\n<p>在ES6中,一个类可以拥有不同参数数量的多个构造函数重载实现.</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Person</span><span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">stirng</span><span class=\"p\">,</span><span class=\"nx\">age</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">...</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">p</span><span class=\"p\">:</span> <span class=\"nx\">Person</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Felipe'</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">);</span>\n<span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">greet</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>(4) 继承</p>\n\n<p>继承表明子类能够从父类得到它的行为.然后在这个子类重写,修改以及添加行为.</p>\n\n<p>继承时TypeScript的核心语法,用extends关键字实现:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Report</span><span class=\"p\">{</span>\n  <span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">string</span><span class=\"o\">&gt;</span><span class=\"p\">){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">run</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">){</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>​</p>\n\n"
    } ,
  
    {
      "title"    : "Ruby on Rails(从零开始)",
      "category" : "ruby",
      "tags"     : "ruby",
      "url"      : "/ruby/2017/11/19/ruby-on-rails-01.html",
      "date"     : "2017年11月19日",
      "content"  : "<h4 id=\"1-安装rails\">1. 安装Rails</h4>\n\n<p><code class=\"highlighter-rouge\">$ gem install rails -v 5.1.2</code></p>\n\n<h4 id=\"2-第一个应用\">2. 第一个应用</h4>\n\n<p><code class=\"highlighter-rouge\">$ rails new hello_app</code></p>\n\n<p>执行rails new命令生成所有文件后,会自动执行bundle install命令.</p>\n\n<!-- more -->\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">文件/文件夹</th>\n      <th style=\"text-align: left\">作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">app/</td>\n      <td style=\"text-align: left\">应用的核心文件,包括模型,视图,控制器等</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">app/assets</td>\n      <td style=\"text-align: left\">应用的静态资源文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">bin/</td>\n      <td style=\"text-align: left\">可执行的二进制文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">config/</td>\n      <td style=\"text-align: left\">应用的配置</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">db/</td>\n      <td style=\"text-align: left\">数据库文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">doc/</td>\n      <td style=\"text-align: left\">应用的文档</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">lib/</td>\n      <td style=\"text-align: left\">代码库模块文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">lib/assets</td>\n      <td style=\"text-align: left\">代码块的静态文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">log/</td>\n      <td style=\"text-align: left\">应用的日志文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">public/</td>\n      <td style=\"text-align: left\">公共可访问文件,如错误页面</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">bin/rails</td>\n      <td style=\"text-align: left\">生成代码,打开终端会话或启动本地服务器的程序</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">test/</td>\n      <td style=\"text-align: left\">应用的测试</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">tmp/</td>\n      <td style=\"text-align: left\">临时文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">vendor/</td>\n      <td style=\"text-align: left\">第三方代码,例如插件和gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">vendor/assets</td>\n      <td style=\"text-align: left\">第三方静态资源</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">README.md</td>\n      <td style=\"text-align: left\">应用简介</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Rakefile</td>\n      <td style=\"text-align: left\">使用rake命令执行的实用任务</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Gemfile</td>\n      <td style=\"text-align: left\">应用所需的gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Gemfile.lock</td>\n      <td style=\"text-align: left\">gem列表,确保这个应用的副本使用相同版本gem</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">config.ru</td>\n      <td style=\"text-align: left\">Rack中间件的配置文件</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">.gitignore</td>\n      <td style=\"text-align: left\">Git忽略的文件模式</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><br /></p>\n\n<p>(1) Bundler</p>\n\n<p>使用Bundler安装和引入该应用所需的gem,并修改应用默认使用的gem,然后再次运行Bundler.</p>\n\n<p>  1° 如果没有在gem指令中指定版本号,Bundler会自动安装最新版本:</p>\n\n<p><code class=\"highlighter-rouge\">gem 'sqlite3</code></p>\n\n<p>  2° 指定gem版本范围,在一定程度上控制Rails版本:</p>\n\n<p><code class=\"highlighter-rouge\">gem 'uglifier', '&gt;= 1.3.0'</code></p>\n\n<p>表示安装版本号大于等于1.3.0的uglifier.</p>\n\n<p><code class=\"highlighter-rouge\">gem 'coffee-rails', '~&gt; 4.0.0'</code></p>\n\n<p>表示安装版本号大于4.0.0,但小于4.1.0的coffee-rails.</p>\n\n<p>即<code class=\"highlighter-rouge\">&gt;=</code>表示始终安装最新版本;<code class=\"highlighter-rouge\">~&gt;</code>表示只安装最后一个数字变化的版本(比如4.0.0到4.0.1),而不安装前面的数字有变化的更新(比如4.0到4.1).</p>\n\n<p><strong>PATH:</strong>rails/Gemfile</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'rails'</span><span class=\"p\">,</span><span class=\"s1\">'~&gt;5.1.4'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span><span class=\"s1\">'1.3.13'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'puma'</span><span class=\"p\">,</span> <span class=\"s1\">'3.10.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sass-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.6'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'uglifier'</span><span class=\"p\">,</span> <span class=\"s1\">'3.2.0'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'coffee-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.2.2'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jquery-rails'</span><span class=\"p\">,</span> <span class=\"s1\">'4.3.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'turbolinks'</span><span class=\"p\">,</span> <span class=\"s1\">'5.0.1'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'jbuilder'</span><span class=\"p\">,</span> <span class=\"s1\">'2.7.0'</span>\n<span class=\"o\">...</span>\n</code></pre></div></div>\n\n<p>这里使用精确的版本号.然后执行:</p>\n\n<p><code class=\"highlighter-rouge\">bundle install</code></p>\n\n<p>bundle install和bundle update的区别?</p>\n\n<p>bundle update:会去相应的源检查Gemfile里的gem更新,然后对比Gemfile.lock文件,如果Gemfile里没有指定的版本或是&gt;=版本就会去相应的源下载安装新版本gem,然后更新Gemfile.lock文件.</p>\n\n<p>bundle install:会先检查Gemfile.lock文件以及相关依赖,然后为本地系统安装Gemfile.lock文件中指定的版本,接着检查Gemfile中有而Gemfile.lock中没有的,然后安装.不会去检查相关源的Gem版本更新.</p>\n\n<p>一般不建议使用bundle update,可以使用bundle install或者bundle update gem_name.</p>\n\n<p>(2) rails server</p>\n\n<p><code class=\"highlighter-rouge\">rails server</code></p>\n\n<p>(3) 模型-视图-控制器</p>\n\n<p>Rails应用的标准文件结构有一个名为<code class=\"highlighter-rouge\">app/</code>的目录,其中有三个子目录:models,views和controllers,这表明Rails采用了MVC模式.</p>\n\n<p>(4) Hello,world!</p>\n\n<p>添加一个控制器(controller action),渲染字符串”hello,world”,以此代替Rails的默认页面.</p>\n\n<p>先在ApplicationController中添加hello动作:</p>\n\n<p><strong>PATH:</strong>rails/app/controllers/application_controller.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ApplicationCotroller</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActionController</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">protect_from_forgery</span> <span class=\"ss\">with: :exception</span>\n  <span class=\"k\">def</span> <span class=\"nf\">hello</span>\n    <span class=\"n\">render</span> <span class=\"ss\">html: </span><span class=\"s2\">\"hello,world\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>再设置跟路由:</p>\n\n<p>定义路由规则:<code class=\"highlighter-rouge\">root 'controller_name#action_name'</code></p>\n\n<p><strong>PATH:</strong>rails/config/routes.rb</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'application#hello'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<h4 id=\"2-使用git做版本控制\">2. 使用Git做版本控制</h4>\n\n<p>(1)安装和设置</p>\n\n<p>第一次运行前要做的系统设置</p>\n\n<p><code class=\"highlighter-rouge\">$ git config —global user.name \"your Name\"</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git config —global user.email your.email@example.com</code></p>\n\n<p>注意,在Git配置中设定的名字和邮箱地址会在所有的公开仓库中显示.</p>\n\n<p>第一次使用仓库前的设置</p>\n\n<p>每次新建仓库(repository,repo)时都要执行.首先进入一个应用的根目录,初始化一个新仓库.</p>\n\n<p><code class=\"highlighter-rouge\">$ git init</code></p>\n\n<p>然后执行git add -A命令,把项目中的所有文件都放在仓库中:</p>\n\n<p><code class=\"highlighter-rouge\">$ git add -A</code></p>\n\n<p>这个命令会把当前目录中的所有文件都放在仓库中,但是匹配特殊文件.gitignore中模式的文件除外.rails new命令会自动创建一个适用于Rails项目的.gitignore文件.</p>\n\n<p>加入仓库的文件一开始位于暂存区(staging area),这一区用于存放待提交的内容.执行status命令可以查看暂存区中有哪些文件:</p>\n\n<p><code class=\"highlighter-rouge\">$ git status</code></p>\n\n<p>如果想让Git保存这些改动,使用commit命令:</p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -m \"Initialize repository\"</code></p>\n\n<p>-m旗标的意思是为这次提交添加一个说明.如果没有指定-m旗标,Git会打开默认编辑器输入说明.</p>\n\n<p>可以使用git log命令查看提交历史:</p>\n\n<p><code class=\"highlighter-rouge\">$ git log</code></p>\n\n<p>这些提交只是发生在本地,只在执行提交操作的设备中存储内容.</p>\n\n<p>(2) 使用Git的好处</p>\n\n<p>(3) Bitbucket(GitLab)</p>\n\n<p>Bitbucket共有仓库和私有仓库都是免费的</p>\n\n<p>使用cat命令打印公钥:</p>\n\n<p><code class=\"highlighter-rouge\">$ cat ~/.ssh/id_ras.pub</code></p>\n\n<p>推送到仓库:</p>\n\n<p><code class=\"highlighter-rouge\">$ git remote add origin git@github.com:leonmin/hello_app.git</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git push -u origin --all</code></p>\n\n<p>先添加名叫origin的仓库源,然后再把仓库推送给这个远端源.(-u旗帜)</p>\n\n<p>(4) 分支,编辑,提交,合并</p>\n\n<p>Gitf分支 (branch)是对仓库的高效复制,在分支中所做的改动,不会影响父级元素.大多数情况下,父级仓库是<code class=\"highlighter-rouge\">master</code>分支.</p>\n\n<p>可以使用<code class=\"highlighter-rouge\">checkout</code>命令,指定<code class=\"highlighter-rouge\">-b</code>旗帜,创建一个新主题分支,创建一个分支,然后再切换到这个新分支:</p>\n\n<p><code class=\"highlighter-rouge\">$ git checkout -b modify-README</code></p>\n\n<p>列出本地所有分支,*号代表当前所在分支:</p>\n\n<p><code class=\"highlighter-rouge\">$ git branch</code></p>\n\n<p>提交现有文件中的全部改动:</p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -a -m \"Improve the README file\"</code></p>\n\n<p>合并</p>\n\n<p><code class=\"highlighter-rouge\">$ git checkout master</code></p>\n\n<p><code class=\"highlighter-rouge\">$ git merge modify-README</code></p>\n\n<p>删除分支:</p>\n\n<p><code class=\"highlighter-rouge\">$ git branch -d modify-README</code></p>\n\n<p>推送:</p>\n\n<p><code class=\"highlighter-rouge\">$ git push</code></p>\n\n<p>(5) 部署</p>\n\n<p>  1° 搭建Heroku部署环境</p>\n\n<p>Heroku使用PostgreSQL数据库,因此需要安装pg gem,这样Rails才能与PostgreSQL通信:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">group</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'pg'</span><span class=\"p\">,</span><span class=\"s1\">'0.20.0'</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>避免在生产环境安装sqlite3 gem,这是因为Heroku不支持SQLite:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">group</span> <span class=\"ss\">:development</span><span class=\"p\">,</span> <span class=\"ss\">:test</span> <span class=\"k\">do</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span><span class=\"s1\">'1.3.13'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'byebug'</span><span class=\"p\">,</span><span class=\"s1\">'9.0.6'</span><span class=\"p\">,</span><span class=\"ss\">platform: :mri</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>为了准备好部署环境,下面执行bundle install命令,并指定一个特殊选项,禁止在本地安装生产环境使用的gem(即pg):</p>\n\n<p><code class=\"highlighter-rouge\">$ bundle install —without production</code></p>\n\n<p>虽然只添加了用于生产环境的gem,所以在执行这个命令其实不会在本地安装任何新的gem,但是又必须执行,因为要把新的pg添加到Gemfile.lock文件中,然后提交这次改动:</p>\n\n<p><code class=\"highlighter-rouge\">$ git commit -a -m \"Update Gemfile for Heroku\"</code></p>\n\n<p>…</p>\n\n"
    } ,
  
    {
      "title"    : "JavaScript设计模式--策略模式",
      "category" : "javascript",
      "tags"     : "javascript",
      "url"      : "/javascript/2017/11/19/javascript-dp-02.html",
      "date"     : "2017年11月19日",
      "content"  : "<p>策略模式的定义是: <strong>定义一系列的算法,把它们一个个封装起来,并且使它们可以相互替换.</strong></p>\n\n<h4 id=\"1-使用策略模式计算奖金\">1. 使用策略模式计算奖金</h4>\n\n<p>需求:绩效为S的人年终奖有4倍工资,绩效为A的人年终奖有3倍工资,而绩效为B的人年终奖有2倍工资.</p>\n\n<p>(1) 最初的代码实现:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">calculateBonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"p\">,</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"o\">===</span><span class=\"s1\">'S'</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"o\">===</span><span class=\"s1\">'A'</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"o\">===</span><span class=\"s1\">'B'</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">calculateBonus</span><span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"mi\">20000</span><span class=\"p\">);</span>  <span class=\"c1\">//40000</span>\n<span class=\"nx\">calculateBonus</span><span class=\"p\">(</span><span class=\"s1\">'S'</span><span class=\"p\">,</span><span class=\"mi\">6000</span><span class=\"p\">);</span> <span class=\"c1\">//24000 </span>\n</code></pre></div></div>\n\n<!-- more -->\n\n<p>这段代码有很多缺点:</p>\n\n<p>  1° calculateBonus函数比较庞大;</p>\n\n<p>  2° calculateBonus函数缺乏弹性,修改时需要深入calculateBonus函数的内部实现,这违反了开放-封闭原则;</p>\n\n<p>  3° 算法的复用性差.</p>\n\n<p>(2) 使用组合函数重构代码:</p>\n\n<p>将各种算法封装到一个个的小函数里面,小函数有良好的命名,很清楚对应哪种算法,也可以被复用.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">performanceS</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"p\">...</span>\n<span class=\"kd\">var</span> <span class=\"nx\">calculateBonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"p\">,</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">performanceLevel</span><span class=\"o\">===</span><span class=\"s1\">'S'</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">performanceS</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>这段代码使得函数变得庞大,且系统变化时缺乏弹性.</p>\n\n<p>(3) 使用策略模式重构代码:</p>\n\n<p>策略模式的目的就是将算法的使用与算法的实现分离开来.</p>\n\n<p>一个基于策略模式的程序至少由两部分组成:</p>\n\n<p>  1° 一组策略类: 封装了具体的算法,并负责具体的计算过程;</p>\n\n<p>  2° 环境类Context: 接受客户的请求,随后将请求委托给某一个策略类.</p>\n\n<p>要做到说明Context中要维持对某个策略对象的引用.</p>\n\n<p>通过传统面向对象语言来实现:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">performanceS</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){};</span>\n<span class=\"nx\">performanceS</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">calculate</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">salary</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">...</span>\n<span class=\"c1\">//定义奖金类Bonus</span>\n<span class=\"kd\">var</span> <span class=\"nx\">Bonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">salary</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">strategy</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Bonus</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">setSalary</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">salary</span> <span class=\"o\">=</span> <span class=\"nx\">salary</span><span class=\"p\">;</span> <span class=\"c1\">//设置员工的原始工资</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Bonus</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">setStrategy</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">strategy</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">strategy</span> <span class=\"o\">=</span> <span class=\"nx\">strategy</span><span class=\"p\">;</span>  <span class=\"c1\">//设置员工绩效等级对应的策略对象</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Bonus</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getBonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"c1\">//获取奖金数额</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">strategy</span><span class=\"p\">.</span><span class=\"nx\">calculate</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">salary</span><span class=\"p\">);</span><span class=\"c1\">//把计算奖金的操作委托给对应的策略对象</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">bonus</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Bonus</span><span class=\"p\">();</span>\n<span class=\"nx\">bonus</span><span class=\"p\">.</span><span class=\"nx\">setSalary</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span>\n<span class=\"nx\">bonus</span><span class=\"p\">.</span><span class=\"nx\">setStrategy</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">performanceS</span><span class=\"p\">());</span><span class=\"c1\">//设置策略对象</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">bonus</span><span class=\"p\">.</span><span class=\"nx\">getBonus</span><span class=\"p\">());</span> <span class=\"c1\">//40000</span>\n</code></pre></div></div>\n<h4 id=\"2-javascript版本的策略模式\">2. JavaScript版本的策略模式</h4>\n\n<p>在JavaScript语言中,函数也是对象,因此将strategy直接定义为函数,用calculateBonus函数来充当Context来接受用户的请求.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">strategies</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"s2\">\"S\"</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"A\"</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"B\"</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">calculateBonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">level</span><span class=\"p\">,</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">strategies</span><span class=\"p\">[</span><span class=\"nx\">level</span><span class=\"p\">](</span><span class=\"nx\">salary</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">calculateBonus</span><span class=\"p\">(</span><span class=\"s1\">'S'</span><span class=\"p\">,</span><span class=\"mi\">20000</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">calculateBonus</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"mi\">10000</span><span class=\"p\">));</span>\n</code></pre></div></div>\n\n<h4 id=\"3-多态在策略模式中的体现\">3. 多态在策略模式中的体现</h4>\n\n<p>每个策略对象负责的算法已经被各自封装在对象内部,当对这些策略对象发出计算请求时,它们会返回各自的不同的计算结果,这正是多态性的体现,也是”它们可以相互替换”的目的.替换Context中当前保存的策略对象,便能执行不同的算法来得到我们想要的结果.</p>\n\n<h4 id=\"4-使用策略模式实现缓动动画\">4. 使用策略模式实现缓动动画</h4>\n\n<p>(1) 实现动画效果的原理:</p>\n\n<p>在JavaScript中,可以通过连续改变元素的某个CSS属性,比如left,top,background-position来实现动画效果.</p>\n\n<p>(2) 思路和一些准备:</p>\n\n<p>分析实现这个程序的思路,提前记录:</p>\n\n<p>  1° 动画开始时,小球所在的原始位置;</p>\n\n<p>  2° 小球移动的目标位置;</p>\n\n<p>  3° 动画开始时的准确时间点;</p>\n\n<p>  4° 小球运动的持续时间;</p>\n\n<p>随后使用setInterval创建一个定时器,每隔19ms循环一次.在定时器的每一帧里我们将动画消耗的时间,小球原始位置等信息传入缓动算法.算法通过参数计算出小球当前所在位置,最后更新该div对应CSS属性,小球就能顺利运动起来.</p>\n\n<p>(3) 让小球运动起来:</p>\n\n<p>常见的缓动算法接受4个参数:动画已消耗的时间,小球原始位置,小球目标位置,动画持续的总时间,返回值时动画元素应处的当前位置:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">tween</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">linear</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">/</span> <span class=\"nx\">d</span> <span class=\"o\">+</span> <span class=\"nx\">b</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">easeIn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"p\">(</span> <span class=\"nx\">t</span> <span class=\"o\">/=</span> <span class=\"nx\">d</span> <span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">+</span> <span class=\"nx\">b</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">strongEaseIn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"p\">(</span> <span class=\"nx\">t</span> <span class=\"o\">/=</span> <span class=\"nx\">d</span> <span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">strongEaseOut</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"p\">(</span> <span class=\"p\">(</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"nx\">t</span> <span class=\"o\">/</span> <span class=\"nx\">d</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">sineaseIn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span> <span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">,</span> <span class=\"nx\">d</span> <span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"p\">(</span> <span class=\"nx\">t</span> <span class=\"o\">/=</span> <span class=\"nx\">d</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">},</span>\n  <span class=\"na\">sineaseOut</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">,</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">d</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span> <span class=\"o\">*</span> <span class=\"p\">(</span> <span class=\"p\">(</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"nx\">t</span> <span class=\"o\">/</span> <span class=\"nx\">d</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">*</span> <span class=\"nx\">t</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>参考jQuery库实现动画:</p>\n\n<p>  1° 创建div:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"position:absolute;background:blue\"</span> <span class=\"na\">id=</span><span class=\"s\">\"div\"</span><span class=\"nt\">&gt;</span>\n  我是div\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p>  2° 定义Animate类,接受一个参数:即将运动起来的dom节点.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Animate</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">dom</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dom</span> <span class=\"o\">=</span> <span class=\"nx\">dom</span><span class=\"p\">;</span><span class=\"c1\">//进行运动的dom节点</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startTime</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"c1\">//运动开始的时间</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"c1\">//动画开始时,dom节点的位置</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">endPos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"c1\">//动画结束时,dom节点的位置</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">propertyName</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"c1\">//dom节点需要被改变的css属性名</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">easing</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"c1\">//缓动算法</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">duration</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"c1\">//动画持续时间</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>  3° Animate.prototype.start 方法:在动画被启动的瞬间,要记录一些信息,供缓动算法计算.并启动定时器:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Animate</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">propertyName</span><span class=\"p\">,</span><span class=\"nx\">endPos</span><span class=\"p\">,</span><span class=\"nx\">duration</span><span class=\"p\">,</span><span class=\"nx\">easing</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startTime</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">;</span><span class=\"c1\">//动画启动时间</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPos</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dom</span><span class=\"p\">.</span><span class=\"nx\">getBoundingClientRect</span><span class=\"p\">()[</span><span class=\"nx\">propertyName</span><span class=\"p\">];</span><span class=\"c1\">//dom节点初始位置</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">propertyName</span> <span class=\"o\">=</span> <span class=\"nx\">propertyName</span><span class=\"p\">;</span><span class=\"c1\">//dom节点需要被改变的CSS属性名</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">endPos</span> <span class=\"o\">=</span> <span class=\"nx\">endPos</span><span class=\"p\">;</span><span class=\"c1\">//dom节点目标位置</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">duration</span> <span class=\"o\">=</span> <span class=\"nx\">duration</span><span class=\"p\">;</span><span class=\"c1\">//动画持续时间</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">easing</span> <span class=\"o\">=</span> <span class=\"nx\">tween</span><span class=\"p\">[</span><span class=\"nx\">easing</span><span class=\"p\">];</span><span class=\"c1\">//缓动算法</span>\n  <span class=\"kd\">var</span> <span class=\"nb\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">timeId</span> <span class=\"o\">=</span> <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"c1\">//启动定时器</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">step</span><span class=\"p\">()</span><span class=\"o\">===</span><span class=\"kc\">false</span><span class=\"p\">){</span><span class=\"c1\">//如果动画已结束,则清楚定时器</span>\n      <span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"nx\">timeId</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span><span class=\"mi\">19</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>Animate.prototype.start接受以下4个参数:</p>\n\n<p>   ① propertyName: 要改变的CSS属性名;</p>\n\n<p>   ② endPos: 小球运动的目标位置;</p>\n\n<p>   ③ duration: 动画持续时间;</p>\n\n<p>   ④ easing: 缓动算法.</p>\n\n<p>  4°  Animate.prototype.step 方法:代表小球每一帧要做的事情.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Animate</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">step</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">;</span><span class=\"c1\">//取得当前时间</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"o\">&gt;=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startTime</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">duration</span><span class=\"p\">){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">endPos</span><span class=\"p\">);</span><span class=\"c1\">//更新小球的CSS属性值</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">pos</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">easing</span><span class=\"p\">(</span><span class=\"nx\">t</span> <span class=\"o\">-</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startTime</span><span class=\"p\">,</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPos</span><span class=\"p\">,</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">endPos</span> <span class=\"o\">-</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">startPos</span><span class=\"p\">,</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">duration</span><span class=\"p\">);</span><span class=\"c1\">//pos为小球当前位置</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">pos</span><span class=\"p\">);</span><span class=\"c1\">//更新小球的CSS属性值</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>  5°  Animate.prototype.update 方法:更新小球CSS属性:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Animate</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">pos</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">dom</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">propertyName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">pos</span> <span class=\"o\">+</span> <span class=\"s1\">'px'</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>  6°  测试代码:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">animate</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Animate</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n<span class=\"nx\">animate</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"s1\">'left'</span><span class=\"p\">,</span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"s1\">'strongEaseOut'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<h4 id=\"5-更广义的算法\">5. 更广义的”算法”</h4>\n\n<p>从定义上来看,策略模式就是用来封装算法的.策略模式也可以用来封装一系列的”业务规则”.只要这些业务规则指向的目标一致,并且可以被替换使用,就可以用策略模式来封装它们.</p>\n\n<h4 id=\"6-表单校验\">6. 表单校验</h4>\n\n<p>(1) 表单校验的第一个版本:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"http://xxx.com/register\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerForm\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n      请输入用户名:<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name=</span><span class=\"s\">\"userName\"</span> <span class=\"nt\">/&gt;</span>\n      请输入密码:<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name=</span><span class=\"s\">\"password\"</span> <span class=\"nt\">/&gt;</span>\n      请输入手机号码:<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name=</span><span class=\"s\">\"phoneNumber\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;button&gt;</span>提交<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;/form&gt;</span>\n    <span class=\"nt\">&lt;script&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">registerForm</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'registerForm'</span><span class=\"p\">);</span>\n      <span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">onsubmit</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">userName</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">===</span><span class=\"s1\">''</span><span class=\"p\">){</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'用户名不能为空'</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"o\">&lt;</span><span class=\"mi\">6</span><span class=\"p\">){</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'密码长度不能少于6位'</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"sr\">/</span><span class=\"se\">(</span><span class=\"sr\">^1</span><span class=\"se\">[</span><span class=\"sr\">3|5|8</span><span class=\"se\">][</span><span class=\"sr\">0-9</span><span class=\"se\">]{9}</span><span class=\"sr\">$</span><span class=\"se\">)</span><span class=\"sr\">/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span> <span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">phoneNumber</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">)){</span>\n          <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'手机号码格式不正确'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"nt\">&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n<p>(2) 使用策略模式重构表单校验</p>\n\n<p>  1° 将校验逻辑封装成<strong>策略对象</strong>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">strategies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">isNonEmpty</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"nx\">errorMsg</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"o\">===</span><span class=\"s1\">''</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">errorMsg</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">minLength</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"nx\">length</span><span class=\"p\">,</span><span class=\"nx\">errorMsg</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">errorMsg</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">isMobile</span><span class=\"p\">:</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"nx\">errorMsg</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"sr\">/</span><span class=\"se\">(</span><span class=\"sr\">^1</span><span class=\"se\">[</span><span class=\"sr\">3|5|8</span><span class=\"se\">][</span><span class=\"sr\">0-9</span><span class=\"se\">](</span><span class=\"sr\">9</span><span class=\"se\">)</span><span class=\"sr\">$</span><span class=\"se\">)</span><span class=\"sr\">/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">errorMsg</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>  2° <strong>客户调用代码</strong>,这里作为Context,负责接收用户的请求并委托给strategy对象.先了解用户是如何向Validator类发送请求的:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">validataFunc</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">validator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Validator</span><span class=\"p\">();</span><span class=\"c1\">//创建一个validator对象</span>\n  <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">userName</span><span class=\"p\">,</span><span class=\"s1\">'isNonEmpty'</span><span class=\"p\">,</span><span class=\"s1\">'用户名不能为空'</span><span class=\"p\">);</span>\n  <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">,</span><span class=\"s1\">'minLength:6'</span><span class=\"p\">,</span><span class=\"s1\">'密码长度不能少于6位'</span><span class=\"p\">);</span>\n  <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">phoneNumber</span><span class=\"p\">,</span><span class=\"s1\">'isMobile'</span><span class=\"p\">,</span><span class=\"s1\">'手机号码格式不正确'</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">errorMsg</span> <span class=\"o\">=</span> <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span><span class=\"c1\">//获取校验结果</span>\n  <span class=\"k\">return</span> <span class=\"nx\">errorMsg</span><span class=\"p\">;</span><span class=\"c1\">//返回校验错误</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">registerForm</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'registerForm'</span><span class=\"p\">);</span>\n<span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">onsubmit</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">errorMsg</span> <span class=\"o\">=</span> <span class=\"nx\">validataFunc</span><span class=\"p\">();</span><span class=\"c1\">//如果有errorMsg有确切返回值,说明未通过校验</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">errorMsg</span><span class=\"p\">){</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">errorMsg</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"c1\">//阻止表单提交</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>  3° <strong>Validator类</strong>的实现:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Validator</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"o\">=</span><span class=\"p\">[];</span><span class=\"c1\">//保存校验规则</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Validator</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">dom</span><span class=\"p\">,</span><span class=\"nx\">rule</span><span class=\"p\">,</span><span class=\"nx\">errorMsg</span><span class=\"p\">){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">ary</span> <span class=\"o\">=</span> <span class=\"nx\">rule</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"p\">);</span><span class=\"c1\">//把strategy和参数分开</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"c1\">//把校验的步骤用空函数包装起来,并放入cache</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">strategy</span> <span class=\"o\">=</span> <span class=\"nx\">ary</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span><span class=\"c1\">//用户挑选的strategy</span>\n    <span class=\"nx\">ary</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"nx\">dom</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span><span class=\"c1\">//把input的value添加进参数列表</span>\n    <span class=\"nx\">ary</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">errorMsg</span><span class=\"p\">);</span><span class=\"c1\">//把errorMsg添加进参数列表</span>\n    <span class=\"k\">return</span> <span class=\"nx\">strategies</span><span class=\"p\">[</span><span class=\"nx\">strategy</span><span class=\"p\">].</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">dom</span><span class=\"p\">,</span><span class=\"nx\">ary</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Validator</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">validatorFunc</span><span class=\"p\">;</span><span class=\"nx\">validatorFunc</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">];){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"nx\">validatorFunc</span><span class=\"p\">();</span><span class=\"c1\">//开始校验,并取得校验后 的返回信息</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">){</span><span class=\"c1\">//如果有确切返回信息,说明校验没通过</span>\n      <span class=\"k\">return</span> <span class=\"nx\">msg</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n</code></pre></div></div>\n<p>  4° 给文本输入框添加多种校验规则:</p>\n\n<p>修改客户调用代码:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">registerForm</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'registerForm'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ValidataFunc</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">validator</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Validator</span><span class=\"p\">();</span>\n  <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">registerForm</span><span class=\"p\">.</span><span class=\"nx\">userName</span><span class=\"p\">,[{</span>\n    <span class=\"na\">strategy</span><span class=\"p\">:</span> <span class=\"s1\">'isNonEmpty'</span><span class=\"p\">,</span>\n    <span class=\"na\">errorMsg</span><span class=\"p\">:</span> <span class=\"s1\">'用户名不能为空'</span>\n  <span class=\"p\">},{</span>\n    <span class=\"na\">strategy</span><span class=\"p\">:</span> <span class=\"s1\">'minLength:6'</span><span class=\"p\">,</span>\n    <span class=\"na\">errorMsg</span><span class=\"p\">:</span> <span class=\"s1\">'用户名长度不能小于6'</span>\n  <span class=\"p\">}]);</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h4 id=\"7-策略模式的优缺点\">7. 策略模式的优缺点</h4>\n\n<p>(1) 策略模式利用组合,委托和多态等技术和思想,可以有效地避免多重条件选择语句;</p>\n\n<p>(2) 策略模式提供了对开放-封闭原则的完美支持,将算法封装在独立的strategy中,使它易于切换,易于理解,易于扩展.</p>\n\n<p>(3) 策略模式的算法也可以复用在系统其它地方;</p>\n\n<p>(4) 在策略模式中利用组合和委托来让Context拥有执行算法的能力,这也是继承的一种更轻便的替代方案.</p>\n\n<h4 id=\"8-一等函数对象和策略模式\">8. 一等函数对象和策略模式</h4>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">S</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">B</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">salary</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">calculateBonus</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">func</span><span class=\"p\">,</span><span class=\"nx\">salary</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">func</span><span class=\"p\">(</span><span class=\"nx\">salary</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">calculateBonus</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h4 id=\"9-小结\">9. 小结</h4>\n\n<p>在JavaScript语言的策略模式中,策略往往被函数所代替,这是策略模式就成为一种”隐形”的模式.</p>\n"
    } ,
  
    {
      "title"    : "JavaScript设计模式--单例模式",
      "category" : "javascript",
      "tags"     : "javascript",
      "url"      : "/javascript/2017/11/19/javascript-dp-01.html",
      "date"     : "2017年11月19日",
      "content"  : "<p>单例模式的定义是: <strong>保证一个类仅有一个实例,并提供一个访问它的全局访问点.</strong></p>\n\n<p>单例模式是一种常用的模式,有一些对象往往只需要一个,比如线程池,全局缓存,浏览器中的window对象等.在JavaScript开发中,单例模式的用途也十分广泛,比如单击登录按钮时,页面会出现一个登录浮窗,而这个登录浮窗是唯一的,无类单击多少下登录按钮,这个浮窗只会被创建一次,那么这个浮窗就适合用单例模式来创建.</p>\n\n<h4 id=\"1--实现单例模式\">1.  实现单例模式</h4>\n\n<p>实现一个标准的单例模式:用一个变量来标志当前是否已经为某个类创建过对象,如果是,则在下一次获取类的实例时,直接返回之前创建的对象.</p>\n\n<!-- more -->\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Singleton</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">getInstance</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">instance</span><span class=\"p\">){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Singleton</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">instance</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">getInstance</span><span class=\"p\">(</span><span class=\"s1\">'sven'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">getInstance</span><span class=\"p\">(</span><span class=\"s1\">'leon'</span><span class=\"p\">);</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"o\">===</span><span class=\"nx\">b</span><span class=\"p\">);</span>  <span class=\"c1\">//true</span>\n</code></pre></div></div>\n\n<p>或者</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">Singleton</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Singleton</span><span class=\"p\">.</span><span class=\"nx\">getInstance</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">instance</span><span class=\"p\">){</span>\n      <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Singleton</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n</code></pre></div></div>\n\n<p>这种方式相对简单,但增加了这个类的”不透明性”,Singleton类的使用者必须知道这是一个单例类,且使用<code class=\"highlighter-rouge\">Singleton.getInstance</code>来获取对象,跟以往<code class=\"highlighter-rouge\">new XXX</code>的方式不同.</p>\n\n<h4 id=\"2-透明的单例模式\">2. 透明的单例模式</h4>\n\n<p>目的:实现一个”透明”的单例类,用户从这个类中创建对象的时候,可以像使用其他任何普通类一样.<br /></p>\n<div class=\"note info\">\n  <h4>实例: 创建CreateDiv单例类</h4>\n  <span>实例作用: 在页面中创建唯一的div节点</span>\n</div>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CreateDiv</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">CreateDiv</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">html</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">CreateDiv</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">init</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n    <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">;</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span> <span class=\"nx\">CreateDiv</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CreateDiv</span><span class=\"p\">(</span><span class=\"s1\">'sven'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CreateDiv</span><span class=\"p\">(</span><span class=\"s1\">'leon'</span><span class=\"p\">);</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"o\">===</span><span class=\"nx\">b</span><span class=\"p\">);</span>  <span class=\"c1\">//true</span>\n</code></pre></div></div>\n\n<p>这个方法把instance封装起来,使用了自执行的匿名函数和闭包,并且让这个匿名函数返回正真的Singleton构造函数,增加了程序的复杂度,不易阅读.</p>\n\n<h4 id=\"3-用代理实现单例模式\">3. 用代理实现单例模式</h4>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">CreateDiv</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">){</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">html</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">CreateDiv</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">init</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n  <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">;</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"c1\">//引入代理类proxySingletonCreateDiv</span>\n<span class=\"kd\">var</span> <span class=\"nx\">ProxySingletonCreateDiv</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">instance</span><span class=\"p\">){</span>\n      <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CreateDiv</span><span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">instance</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ProxySingletonCreateDiv</span><span class=\"p\">(</span><span class=\"s1\">'sven'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ProxySingletonCreateDiv</span><span class=\"p\">(</span><span class=\"s1\">'lily'</span><span class=\"p\">);</span>\n<span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"o\">===</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>通过引入代理类的方法,把负责管理单例的逻辑移到了代理类<code class=\"highlighter-rouge\">proxySingletonCreateDiv</code>中.这样<code class=\"highlighter-rouge\">CreateDiv</code>就变成了一个普通的类,它跟<code class=\"highlighter-rouge\">proxySingletonCreateDiv</code>组合起来就达到了单例模式的效果.</p>\n\n<p>本例时缓存代理的应用之一.</p>\n\n<h4 id=\"4-javascript中的单例模式\">4. JavaScript中的单例模式</h4>\n\n<p>JavaScript是一门无类(class-free)语言,因此生搬单例模式的概念的概念并无意义.单例模式的核心是确保只有一个实例,并提供全局访问.</p>\n\n<p>全局变量不是单例模式呢,但在JavaScript开发中,我们经常会把全局变量当成单例来使用.例如:</p>\n\n<p><code class=\"highlighter-rouge\">var a = {};</code></p>\n\n<p>当用这种方法创建对象a时,对象a确实是独一无二的,但是全局变量存在很多问题,它容易造成命名空间污染.</p>\n\n<p>(1) 使用命名空间</p>\n\n<p>适当地使用命名空间,并不会杜绝全局变量,但可以减少全局变量的数量.</p>\n\n<p>最简单的方法依然是用字面量的方式:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">namespace1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nl\">b</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>将a,b定义为namespace1的属性,减少变量和全局作用域打交道的机会,而且可以动态地创建命名空间:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">MyApp</span><span class=\"o\">=</span><span class=\"p\">{};</span>\n<span class=\"nx\">MyApp</span><span class=\"p\">.</span><span class=\"nx\">namespace</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">parts</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">MyApp</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">parts</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">current</span><span class=\"p\">[</span><span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]]){</span>\n      <span class=\"nx\">current</span><span class=\"p\">[</span><span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">current</span><span class=\"p\">[</span><span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">MyApp</span><span class=\"p\">.</span><span class=\"nx\">namespace</span><span class=\"p\">(</span><span class=\"s1\">'event'</span><span class=\"p\">);</span>\n<span class=\"nx\">MyApp</span><span class=\"p\">.</span><span class=\"nx\">namespace</span><span class=\"p\">(</span><span class=\"s1\">'dom.style'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">dir</span><span class=\"p\">(</span><span class=\"nx\">MyApp</span><span class=\"p\">);</span>\n<span class=\"c1\">//上面的代码等价于:</span>\n<span class=\"kd\">var</span> <span class=\"nx\">MyApp</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"na\">event</span><span class=\"p\">:{},</span>\n  <span class=\"na\">dom</span><span class=\"p\">:{</span>\n    <span class=\"na\">style</span><span class=\"p\">:{}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>​</p>\n\n<p>(2) 使用闭包封装私有变量</p>\n\n<p>这种方法把一些变量封装在闭包的内部,只暴露一些接口跟外部通信:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"s1\">'sven'</span><span class=\"p\">,</span>\n        <span class=\"nx\">_age</span> <span class=\"o\">=</span> <span class=\"mi\">29</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span><span class=\"p\">{</span>\n    <span class=\"na\">getUserInfo</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n      <span class=\"k\">return</span> <span class=\"nx\">_name</span> <span class=\"o\">+</span> <span class=\"s1\">'-'</span> <span class=\"o\">+</span> <span class=\"nx\">_age</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n</code></pre></div></div>\n\n<p>使用下划线约定私有变量_name和__age,它们被封装在闭包产生的作用域中,外部是访问不到这两个变量的,这就避免了对全局变量的命令污染.</p>\n\n<h4 id=\"5-惰性单例\">5. 惰性单例</h4>\n\n<p>惰性单例指在需要的时候才创建对象实例.惰性单例是单例模式的重点.</p>\n\n<div class=\"note info\">\n  <h4>实例: 创建CreateLoginLayer.</h4>\n  <span>实例作用: 在页面中创建唯一的登录浮窗.\n  </span>\n</div>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">createLoginLayer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">div</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">div</span><span class=\"p\">){</span>\n      <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n      <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'登录浮窗'</span><span class=\"p\">;</span>\n      <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">dispaly</span> <span class=\"o\">=</span> <span class=\"s1\">'none'</span><span class=\"p\">;</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">div</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})();</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'loginBtn'</span><span class=\"p\">).</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">loginLayer</span> <span class=\"o\">=</span> <span class=\"nx\">createLoginLayer</span><span class=\"p\">();</span>\n  <span class=\"nx\">loginLayer</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">display</span> <span class=\"o\">=</span> <span class=\"s1\">'block'</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<h4 id=\"6-通用的惰性单例\">6. 通用的惰性单例</h4>\n\n<p>上面的代码仍有问题:</p>\n\n<p>(1) 这段代码仍然是违反单一职责原则的,创建对象和管理单例的逻辑都放在<code class=\"highlighter-rouge\">createLoginLayer</code>对象内部;</p>\n\n<p>(2) 如果下次需要创建页面中唯一的<code class=\"highlighter-rouge\">iframe</code>,或者<code class=\"highlighter-rouge\">script</code>标签,用来跨域请求数据,就需要把函数重抄一遍:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">createIframe</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">iframe</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">iframe</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'iframe'</span><span class=\"p\">);</span>\n    <span class=\"nx\">iframe</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">display</span> <span class=\"o\">=</span> <span class=\"s1\">'none'</span><span class=\"p\">;</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">iframe</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">iframe</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n</code></pre></div></div>\n<p>将管理单例的逻辑从原来的代码中抽离出来,这些逻辑被封装在<code class=\"highlighter-rouge\">getSingle</code>函数内部,创建对象的方法fn被当成参数动态传入<code class=\"highlighter-rouge\">getSingle</code>函数:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">getSingle</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span><span class=\"kr\">arguments</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>使用getSingle函数创建唯一的iframe用于加载第三方页面:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">createSingleIframe</span> <span class=\"o\">=</span> <span class=\"nx\">getSingle</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">iframe</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'iframe'</span><span class=\"p\">);</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">iframe</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">iframe</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'loginBtn'</span><span class=\"p\">).</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">loginLayer</span> <span class=\"o\">=</span> <span class=\"nx\">createSingleIframe</span><span class=\"p\">();</span>\n  <span class=\"nx\">loginLayer</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">'http://baidu.com'</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>这里将创建实例对象的职责和管理单例的职责分别放在两个方法中,这两个方法可以独立变化而不影响.</p>\n\n<p>这种单例模式的用途不止创建对象,比如渲染完页面的一个列表后,要为这个列表绑定click事件,如果是通过ajax动态往列表里追加数据,在使用事件代理的前提下,click事件实际上只需要第一次渲染列表时绑定一次.</p>\n\n<p>使用jQuery,选择节点绑定事件one事件:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">bindEvent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">).</span><span class=\"nx\">one</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">render</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'开始渲染列表'</span><span class=\"p\">);</span>\n  <span class=\"nx\">bindEvent</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>使用getSingle函数:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">bindEvent</span> <span class=\"o\">=</span> <span class=\"nx\">getSingle</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'div1'</span><span class=\"p\">).</span><span class=\"nx\">onclick</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n<span class=\"kd\">var</span> <span class=\"nx\">render</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'开始渲染列表'</span><span class=\"p\">);</span>\n  <span class=\"nx\">bindEvent</span><span class=\"p\">():</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n<span class=\"nx\">render</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>可以看到,render函数和bindEvent函数都分别执行了3次,但div实际上只绑定了一个事件.</p>\n\n<h4 id=\"7-总结\">7. 总结</h4>\n\n<p>单例模式是一种简单非常实用的模式,特别是惰性单例技术,在合适的时候才创建对象,并且只创建唯一的一个.并将创建对象和管理单例的职责分布在两个不同的方法中.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-4-完善应用",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/19/angular-04.html",
      "date"     : "2017年11月19日",
      "content"  : "<h4 id=\"1-渲染多行\">1. 渲染多行</h4>\n\n<h4 id=\"2-创建article类\">2. 创建Article类</h4>\n\n<p>写Angular代码的最佳实践之一就是尝试从组件代码中把你正在使用的数据结构隔离出来.这到这一点就要创建一个数据结构,用以表示单个文章:</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.model.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Article</span><span class=\"p\">{</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">votes</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"nx\">votes</span><span class=\"p\">?:</span> <span class=\"nx\">number</span><span class=\"p\">){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"o\">=</span> <span class=\"nx\">title</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">link</span><span class=\"o\">=</span> <span class=\"nx\">link</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">=</span> <span class=\"nx\">votes</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<!-- more -->\n\n<p>注意这里创建了一个Article的新类,这是一个普通类而不是Angular组件,在MVC模式中,它被称为模型(model).其中votes参数时可选的(用末尾的?标出来),并且默认为0.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Component</span><span class=\"p\">,</span><span class=\"nx\">OnInit</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Article</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./article.model'</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ArticleComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"nl\">article</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span>\n      <span class=\"s1\">'Angular 2'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'http://angular.io'</span><span class=\"p\">,</span>\n      <span class=\"mi\">10</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteUp</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteDown</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>这里需要引入Article类,添加代码<code class=\"highlighter-rouge\">import {Article} from './article.model';</code>.</p>\n\n<p>以前将属性存在组件上,现在存储一个对article的引用.接下来还要修改视图代码,从正确的位置获取模板变量.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"four wide column center aligned votes\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ui statistic\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"value\"</span><span class=\"nt\">&gt;</span>\n      \\{\\{article.votes\\}\\}\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"label\"</span><span class=\"nt\">&gt;</span>\n      Points\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"twelve wide column\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"ui large header\"</span> <span class=\"na\">href=</span><span class=\"s\">\"\\{\\{article.link\\}\\}\"</span><span class=\"nt\">&gt;</span>\\{\\{article.title\\}\\}<span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ui big horizontal list voters\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">voteUp</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"arrow up icon\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>\n        upvote\n      <span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">voteDown</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"arrow down icon\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>\n        downvote\n      <span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>这里voteUp和voteDown方法打破了Article类的封装,因为它们直接修改了文章的内部属性.</p>\n\n<table><tr><td bgcolor=\"#d8ff83\">Q: 当前的voteUp和voteDown违反了迪米特法则:</td></tr></table>\n\n<p>A: 迪米特法则值:一个对象对其他对象的结构或属性所作出的假设应该越少越好.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.model.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">Article</span><span class=\"p\">{</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">votes</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"nx\">votes</span><span class=\"p\">?:</span> <span class=\"nx\">number</span><span class=\"p\">){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"o\">=</span> <span class=\"nx\">title</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">link</span><span class=\"o\">=</span> <span class=\"nx\">link</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">=</span> <span class=\"nx\">votes</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteUp</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteDown</span><span class=\"p\">():</span> <span class=\"k\">void</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">domain</span><span class=\"p\">():</span> <span class=\"nx\">string</span><span class=\"p\">{</span>\n    <span class=\"k\">try</span><span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'//'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n      <span class=\"k\">return</span> <span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">){</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>然后在ArticleComponent组件来调用这些方法.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ArticleComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"nl\">article</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Angular'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'http://angular.io'</span><span class=\"p\">,</span>\n    <span class=\"mi\">10</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteUp</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">voteUp</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteDown</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">voteDown</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<table><tr><td bgcolor=\"#d8ff83\">Q: 为什么模型和组件都有一个voteUp函数?</td></tr></table>\n\n<p>A: 这两个函数所做的事情略有不同.ArticleComponent上的voteUp()函数是与组件的视图有关,而Article模型上的voteUp()定义了模型上的变化.即将Article模型应该让投票逻辑从特定的视图分离出来,</p>\n\n<h4 id=\"3-存储多篇文章\">3. 存储多篇文章</h4>\n\n<p>展示多个Article的列表先让AppComponent拥有一份文章集合.</p>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Article</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./article/article.model'</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span><span class=\"p\">{</span>\n  <span class=\"nl\">articles</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">[];</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">articles</span><span class=\"o\">=</span><span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span><span class=\"s1\">'Angular 2'</span><span class=\"p\">,</span><span class=\"s1\">'http://angular.io'</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n      <span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span><span class=\"s1\">'Fullstack'</span><span class=\"p\">,</span><span class=\"s1\">'http://fullstack.io'</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n      <span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span><span class=\"s1\">'ReactJs'</span><span class=\"p\">,</span><span class=\"s1\">'http://reactjs.io'</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n    <span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">addArticle</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">):</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Adding article title: </span><span class=\"p\">${</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\"> and link: </span><span class=\"p\">${</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n    <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n    <span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<font color=\"#c42d31\">注意:  这里需要引入article模型.</font>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Article</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./article/article.model'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>在angular中<code class=\"highlighter-rouge\">'./filename'</code>表示当前目录,<code class=\"highlighter-rouge\">'../filename'</code>表示上一级目录.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">,</span> <span class=\"nx\">Input</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Article</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./article.model'</span><span class=\"p\">;</span>\n<span class=\"p\">...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ArticleComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">article</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">;</span>\n  <span class=\"nx\">voteUp</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">voteUp</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteDown</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">voteDown</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<font color=\"#c42d31\">注意:  这里使用了@Input,故需要添加Input.</font>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">,</span> <span class=\"nx\">Input</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h4 id=\"5-渲染文章列表\">5. 渲染文章列表</h4>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...//form\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ui grid posts\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;app-article</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let article of articles\"</span> <span class=\"err\">[</span><span class=\"na\">article</span><span class=\"err\">]=\"</span><span class=\"na\">article</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/app-article&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>要为组件指定一个输入属性article,就要使用<code class=\"highlighter-rouge\">[inputName]=\"inputValue\"</code>表达式.在本例中该表达式的意思是:把输入属性article设置为局部变量article的值,而后者是由ngFor所设置的.</p>\n\n<p>article变量在代码段出现次数太多,可以把NgFor创建的的临时变量命名为footer:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;app-article</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let footer of articles\"</span> <span class=\"err\">[</span><span class=\"na\">article</span><span class=\"err\">]=\"</span><span class=\"na\">footer</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/app-article&gt;</span>\n</code></pre></div></div>\n\n<p>这里有三个变量:</p>\n\n<p>(1) articles是一个Article的数组,由AppComponent组件定义;</p>\n\n<p>(2) footer是一个articles数组中的单个元素.由NgFor定义;</p>\n\n<p>(3) article是一个字段名,由ArticleComponent中的inputs属性定义.</p>\n\n<p>本质上,NgFor首先生成了一个临时变量footer,然后把它传给了app-article.</p>\n\n<h4 id=\"6-添加新文章\">6. 添加新文章</h4>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">addArticle</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">):</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n  <span class=\"nx\">consle</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Adding article title: </span><span class=\"p\">${</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\"> and link: </span><span class=\"p\">${</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Article</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n  <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n  <span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"7--最后的修改\">7.  最后的修改</h4>\n\n<p>(1) 显示文章所属的域名</p>\n\n<p>为链接添加一个提示信息,以便在用户点击链接时显示将重定向到的域名.</p>\n\n<p>把domain方法添加到Article类中.</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.model.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">domain</span><span class=\"p\">():</span> <span class=\"nx\">string</span><span class=\"p\">{</span>\n  <span class=\"k\">try</span><span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"na\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'//'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"twelve wide column\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"ui large header\"</span> <span class=\"na\">href=</span><span class=\"s\">\"\\{\\{article.link\\}\\}\"</span><span class=\"nt\">&gt;</span>\\{\\{article.title\\}\\}<span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"meta\"</span><span class=\"nt\">&gt;</span>\n    (\\{\\{article.domain()\\}\\})\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ui big horizontal list voters\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">voteUp</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;&lt;/a&gt;&lt;/li&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p>(2) 基于分数重新排序</p>\n\n<p>将分数高的条目显示的顶部.在AppComponent上创建一个新方法sortedArticles.</p>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">sortedArticles</span><span class=\"p\">():</span> <span class=\"nx\">Article</span><span class=\"p\">[]{</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">articles</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">Article</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">votes</span> <span class=\"o\">-</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ui grid posts\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;app-article</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let article of sortedArticles()\"</span> <span class=\"err\">[</span><span class=\"na\">article</span><span class=\"err\">]=\"</span><span class=\"na\">article</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/app-article&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n<h4 id=\"8-总结\">8. 总结</h4>\n\n<p>angular程序的写法:</p>\n\n<p>(1) 把应用拆分为组件;</p>\n\n<p>(2) 创建视图;</p>\n\n<p>(3) 定义模型;</p>\n\n<p>(4) 显示模型;</p>\n\n<p>(5) 添加交互.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-3-创建应用",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/17/angular-03.html",
      "date"     : "2017年11月17日",
      "content"  : "<p>目标:创建一个仿Reddit的应用.\n分析: 应用程序中需要构造两个组件:</p>\n<ul>\n  <li>整体应用程序,包含一个用来提交的表单;</li>\n  <li>每个文章;</li>\n</ul>\n\n<h4 id=\"1-创建应用\">1. 创建应用</h4>\n<p>生成新项目:\n<code class=\"highlighter-rouge\">$ ng new angular-reddit</code></p>\n<h4 id=\"2-应用程序组件\">2. 应用程序组件</h4>\n<p>构建一个新组件:\n(1) 存储当前的文章列表;\n(2) 包含一个表单,用来提交新文章.\n<!-- more -->\n<strong>PATH:</strong>angular/src/app/app.component.html</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;form</span> <span class=\"na\">class=</span><span class=\"s\">\"ui large form segment\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h3</span> <span class=\"na\">class=</span><span class=\"s\">\"ui header\"</span><span class=\"nt\">&gt;</span>Add a Link<span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"field\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"title\"</span><span class=\"nt\">&gt;</span>Title:<span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">name=</span><span class=\"s\">\"title\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"field\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"link\"</span><span class=\"nt\">&gt;</span>Link:<span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">name=</span><span class=\"s\">\"link\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n</code></pre></div></div>\n<h4 id=\"3-添加互动\">3. 添加互动</h4>\n<p>当提交表单时,希望调用一个函数来创建并添加一个链接.可以往&lt;button /&gt;元素上添加一个函数来响应&lt;button /&gt;的onClick事件,可以像这样把它传进去:</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">addArticle</span><span class=\"err\">()\"</span> <span class=\"na\">class=</span><span class=\"s\">\"ui right floated button\"</span><span class=\"nt\">&gt;</span>Submit Link<span class=\"nt\">&lt;/button&gt;</span>\n</code></pre></div></div>\n<p><strong>PATH:</strong>angular/src/app/app.component.ts</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span><span class=\"p\">{</span>\n  <span class=\"nx\">addArticle</span><span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">,</span><span class=\"nx\">link</span><span class=\"p\">:</span> <span class=\"nx\">HTMLInputElement</span><span class=\"p\">):</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Adding article title: ${title.value} and link: ${link.value}`);\n    return false;\n  }\n}\n</span></code></pre></div></div>\n<p>一旦把addArticle()函数添加到AppComponent中并且把(click)事件处理器添加到&lt;button /&gt;元素上,那么每当点击此按钮,就会调用函数.注意,addArticle()函数可以接收两个参数:title和link.因此需要修改模板,代码如下:\n<strong>PATH:</strong>angular/src/app/app.component.html</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;form</span> <span class=\"na\">class=</span><span class=\"s\">\"ui large form segment\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h3</span> <span class=\"na\">class=</span><span class=\"s\">\"ui header\"</span><span class=\"nt\">&gt;</span>Add a Link<span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"field\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"title\"</span><span class=\"nt\">&gt;</span>Title:<span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">name=</span><span class=\"s\">\"title\"</span> <span class=\"err\">#</span><span class=\"na\">newtitle</span><span class=\"nt\">&gt;</span><span class=\"c\">&lt;!-- changed --&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"field\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"link\"</span><span class=\"nt\">&gt;</span>Link:<span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">name=</span><span class=\"s\">\"link\"</span> <span class=\"err\">#</span><span class=\"na\">newlink</span><span class=\"nt\">&gt;</span><span class=\"c\">&lt;!-- changed --&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"c\">&lt;!-- added this button --&gt;</span>\n  <span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">addArticle</span><span class=\"err\">(</span><span class=\"na\">newtitle</span><span class=\"err\">,</span> <span class=\"na\">newlink</span><span class=\"err\">)\"</span> <span class=\"na\">class=</span><span class=\"s\">\"ui positive right floated button\"</span><span class=\"nt\">&gt;</span>\nSubmit link\n  <span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n</code></pre></div></div>\n<p>注意:在input标签上使用了#(hash)来要求Angular把该元素赋值给一个局部变量.通过把#title和#link添加到适当的&lt;input /&gt;元素上,就可以把它们作为变量传给按钮上的addArticle()函数.\n总结:</p>\n\n<p>(1) 在模板中创建了一个button标签,向用户表明应该点击哪里;</p>\n\n<p>(2) 新建了一个名叫addArticle()的函数,来定义按钮被点击时要做的事情;</p>\n\n<p>(3) 在button上添加一个(click)属性,意思为”点击了按钮,就触发addArticle函数”;</p>\n\n<p>(4) 在两个input标签上分别添加了#newtitle和#newlink属性.</p>\n\n<p>讲解:</p>\n\n<p>(1) <strong>绑定input值</strong></p>\n\n<p><code class=\"highlighter-rouge\">&lt;input name=\"title\" #newtitle&gt;</code>\n这段标记告诉Angular把这个&lt;input&gt;绑定到变量newtitle上.<code class=\"highlighter-rouge\">#newtitle</code>语法被称作一个解析,其效果是让变量newtitle可用于该视图的所有表达式中.\nnewtitle现在是一个对象,代表这个input DOM元素(类型是<code class=\"highlighter-rouge\">HTMLInputElement</code>).且可以通过<code class=\"highlighter-rouge\">newtitle.value</code>表达式获取这个输入框的值.</p>\n\n<p>(2) <strong>把事件绑定到动作</strong></p>\n\n<p>当发生(click)事件时,会调用addArticle并传入两个参数:newtitle和newlink.这个函数和这两个参数使从哪里来?</p>\n\n<p>  1° addArticle是组件定义类AppComponent里的一个函数;</p>\n\n<p>  2° newtitle来自名叫title的input标签上的解析;</p>\n\n<p>  3° newlink来自名叫link的input标签上的解析;</p>\n\n<p>(3)<strong>定义操作逻辑</strong></p>\n\n<p>在class AppComponent中,addArticle函数接收两个参数:title和link.注意,title和link都是<code class=\"highlighter-rouge\">HTMLInputElement</code>类型的对象,因此要从input取值,就得调用<code class=\"highlighter-rouge\">title.value</code>.</p>\n<table><tr><td bgcolor=\"#d8ff83\">Q: 函数中使用了反引号字符串:</td></tr></table>\n<p>A: 这是ES6中非常便利的一个特性:反引号字符串会展开模板变量!这里,把<code class=\"highlighter-rouge\">${title.value}</code>放在了字符串中,它最终会被替换成<code class=\"highlighter-rouge\">title.value</code>的值.</p>\n\n<h4 id=\"4-添加文章组件\">4. 添加文章组件</h4>\n<p>新建一个组件来单独展示这些提交过的文章.\n<code class=\"highlighter-rouge\">$ ng generate component article</code>\n定义组件包括3部分代码:\n(1) 在模板中定义了ArticleComponent的视图;</p>\n\n<p>(2) 通过为类加上@Component注解定义了ArticleComponent组件的元数据;</p>\n\n<p>(3) 定义了一个组件定义类Article,其中是组件本身的逻辑.</p>\n\n<p>(1) 创建ArticleComponent的template:</p>\n\n<p><strong>PATH:</strong>angular/src/app/article/article.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"four wide column center aligned votes\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ui statistic\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"value\"</span><span class=\"nt\">&gt;</span>\n      \n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"label\"</span><span class=\"nt\">&gt;</span>\n      Points\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"twelve wide column\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">class=</span><span class=\"s\">\"ui large header\"</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;</span>\n    \n  <span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ui big horizontal list voters\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">voteUp</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"arrow up icon\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>\n        upvote\n      <span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li</span> <span class=\"na\">class=</span><span class=\"s\">\"item\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;a</span> <span class=\"na\">href</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">voteDown</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;i</span> <span class=\"na\">class=</span><span class=\"s\">\"arrow down icon\"</span><span class=\"nt\">&gt;&lt;/i&gt;</span>\n          downvote\n      <span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p>(2) 创建ArticleComponent:\n<strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-article'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./article.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrl</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./article.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">host</span><span class=\"p\">:{</span>\n    <span class=\"na\">class</span><span class=\"p\">:</span> <span class=\"s1\">'row'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<p>在Angular中,组件的宿主就是该组件所附着到的元素.在@Component中传入一个选项<code class=\"highlighter-rouge\">host: {class: 'row'}</code>.它告诉Angular:我们要在宿主元素(app-article标签)上设置class属性,使其具有row类.</p>\n<table><tr><td bgcolor=\"#d8ff83\">Q: host选项:</td></tr></table>\n<p>A: 意味着我们可以把app-article的页面脚本封装在组件之内.即不必再使用app-article标签的同时要求父视图中的页面脚本具有<code class=\"highlighter-rouge\">class=\"row\"</code>属性.借助<code class=\"highlighter-rouge\">host</code>选项,就可以在组件内部配置宿主元素.</p>\n\n<p>(3) 创建组件定义类ArticleComponent:\n<strong>PATH:</strong>angular/src/app/article/article.component.ts</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ArticleComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"nl\">votes</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">link</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"o\">=</span> <span class=\"s1\">'angular 2'</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">link</span><span class=\"o\">=</span> <span class=\"s1\">'http://angular.io'</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteUp</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">voteDown</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>(4) 使用app-article组件:\n<strong>PATH:</strong>angular/src/app/appcomponent.html</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ui grid post\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;app-article&gt;&lt;/app-article&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n<p>(5) &lt;app-article&gt;没有被编译?\n因为AppComponent组件目前还不知道这个ArticleComponent组件.为了把新的组件引荐给AppComponent,我们需要把ArticleComponent添加到<code class=\"highlighter-rouge\">NgModule</code>的<code class=\"highlighter-rouge\">declarations</code>列表中.\n<strong>PATH:</strong>angular/src/app/app.module.ts</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppComponent</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">ArticleComponent</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./article/article.component.ts'</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:[</span>\n    <span class=\"nx\">AppComponent</span><span class=\"p\">,</span>\n    <span class=\"nx\">ArticleComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<p>(6) 点击”赞”或”踩”发生预料之外的刷新.\n在默认情况下,JavaScript会把click事件冒泡到所有父级组件中.要解决这个问题需要让click的事件处理器返回false.</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">voteDown</span><span class=\"p\">():</span> <span class=\"kr\">boolean</span><span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">votes</span><span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>修改过后就不会有多余的页面刷新.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-2-绑定数据",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/17/angular-02.html",
      "date"     : "2017年11月17日",
      "content"  : "<h4 id=\"1-把数据添加到组件中\">1. 把数据添加到组件中</h4>\n\n<p>创建app-user-item标签:\n<code class=\"highlighter-rouge\">$ ng generate component user-item</code>\n若希望UserItemComponent显示一个指定用户的名字.</p>\n\n<h5 id=\"angularsrcappuser-itemuser-itemcomponentts\">angular/src/app/user-item/user-item.component.ts</h5>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">UserItemComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">Oninit</span><span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"o\">=</span> <span class=\"s1\">'Felipe'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">(){</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<!-- more -->\n\n<h4 id=\"2-name属性\">2. name属性</h4>\n\n<p>在<code class=\"highlighter-rouge\">name: string;</code>中,name是属性名,string是属性的类型.为name指定类型是TypeScript中的特性,用来确保它的值必须是string.</p>\n\n<h4 id=\"3-构造函数\">3. 构造函数</h4>\n\n<p>定义了构造函数后,这个函数会在创建这个类的实例时自动调用.在构造函数中可以通过this.name来设置name属性.</p>\n\n<h4 id=\"4-渲染模板\">4. 渲染模板</h4>\n\n<p>可以使用模板语法(也就是双花括号语法{{}})在模板中显示变量的值.</p>\n\n<h5 id=\"pathangularsrcappuser-itemuser-itemcomponenthtml\">PATH:angular/src/app/user-item/user-item.component.html</h5>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;p&gt;</span>\n  Hello \n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div></div>\n\n<font color=\"#c42d31\">注意: 在template中引入一个新的语法:.这些括号叫做\"模板标签\"(也叫\"小胡子标签\").模板标签中间的任何东西都会被当作一个表达式来展开.</font>\n\n<h4 id=\"5-使用数组\">5. 使用数组</h4>\n\n<p>生成一个列表组件:\n<code class=\"highlighter-rouge\">$ ng generate component user-list</code></p>\n\n<p><strong>PATH:</strong>angular/src/app/app.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>\n  <span class=\"nt\">&lt;app-user-list&gt;&lt;/app-user-list&gt;</span>\n<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>在UserListComponent类中添加了新的string[]属性,这种语法表示names的类型是string构成的数组,它的另一种写法是Array&lt;string&gt;.</p>\n\n<p><strong>PATH:</strong>angular/src/app/user-list/user-list.component.ts</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">UserListComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"nl\">names</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[];</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">names</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Ari'</span><span class=\"p\">,</span><span class=\"s1\">'Carios'</span><span class=\"p\">,</span><span class=\"s1\">'Felipe'</span><span class=\"p\">,</span><span class=\"s1\">'Lily'</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>使用一个ul和一个添加了<code class=\"highlighter-rouge\">*ngFor=\"let name of names\"</code>属性的li元素来更新模板.</p>\n\n<p><strong>PATH:</strong>angular/src/app/user-list/user-list.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let name of names\"</span><span class=\"nt\">&gt;</span>Hello <span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">*ngFor</code>语法是想在这个属性上使用NgFor指令.可以把NgFor理解为类似于for的循环,其目的是为集合中的每个条目新建一个DOM元素.\nNgFor指令将为数组names中的每一个条目渲染出一个li标签,并声明一个本地变量name来持有当前迭代的条目,然后这个新变量将被插值到Hello 代码片段里.</p>\n<table><tr>\n<td bgcolor=\"#d8ff83\">Q: NgFor会重复渲染ngFor所在的元素:</td></tr></table>\n<p>A: 即把NgFor放在li标签上而不是ul标签上,因为希望重复的是列表元素(li)而不是列表本身(ul).</p>\n\n<h4 id=\"6使用useritemcomponent组件\">6.使用UserItemComponent组件</h4>\n\n<p>使用UserItemComponent作为UserListComponent的子组件:即不再直接重复渲染li标签,而是让UserItemComponent来为列表中的每个条目指定模板和功能.</p>\n\n<p><strong>(1) 配置UserListComponent来渲染UserItemComponent–渲染UserItemComponent.</strong></p>\n\n<p>将li标签替换为app-user-item标签,且保留ngFor属性.\n<strong>PATH:</strong>angular/src/app/user-list/user-list.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;app-user-item</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let name of names\"</span><span class=\"nt\">&gt;&lt;/app-user-item&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div></div>\n\n<p><strong>(2) 配置\nUserItemComponent来接受name变量作为输入–接收输入.</strong></p>\n\n<p><strong>PATH:</strong>angular/src/app/user-item/user-item.component.ts</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span><span class=\"p\">{</span>\n  <span class=\"nx\">Component</span><span class=\"p\">,</span><span class=\"nx\">OnInit</span><span class=\"p\">,</span><span class=\"nx\">Input</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/code'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-user-item'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./user-item.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrl</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./user-item.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">UserItemComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span><span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(){}</span>\n  <span class=\"nx\">ngOinInit</span><span class=\"p\">(){}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>@Input注解,能让我们从父模板中传进来一个值.</p>\n\n<p><strong>(3) 配置UserListComponent的模板来把用户名传给UserItemComponent–传入Input值.</strong></p>\n\n<p>为了把一个值传入组件,就要在模板中使用方括号[]语法.</p>\n\n<p><strong>PATH:</strong>angular/src/app/user-list/user-list.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;app-user-item</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let name of names\"</span> <span class=\"err\">[</span><span class=\"na\">name</span><span class=\"err\">]=\"</span><span class=\"na\">name</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/app-user-item&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div></div>\n\n<p>在app-user-item标签上添加了新属性[name]=”name”.在Angular中添加一个带方括号的属性意味着把一个值传给该组件上同名的输入属性,即发生了如下操作:</p>\n\n<p>(1) 在names中迭代;</p>\n\n<p>(2) 为names中每个元素创建一个新的UserItemComponent;</p>\n\n<p>(3) 把当前名字的值传给UserItemComponent上名叫name的Input属性.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-1-搭建项目",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/17/angular-01.html",
      "date"     : "2017年11月17日",
      "content"  : "<h4 id=\"1-制作component\">1. 制作Component</h4>\n<p>Angular背后的指导思想之一就是组件化,而组件化的基本思想就是教浏览器认识一些拥有自定义功能的新标签.</p>\n\n<p>要使用angular-cli来创建组件,可以使用generate(生成)命令:</p>\n\n<p><code class=\"highlighter-rouge\">$ ng generate component hello-world</code></p>\n\n<p>基本组件包括两部分:</p>\n\n<p><strong>(1) Component注解</strong></p>\n\n<p><strong>(2) 组件定义类</strong></p>\n\n<!-- more -->\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n    <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-hello-world'</span><span class=\"p\">,</span>\n    <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./hello-world.component.html'</span><span class=\"p\">,</span>\n    <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./hello-world.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">HelloWorldComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n    <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<font color=\"#c42d31\">注意: TypeScript文件的后缀是.ts而不是.js,浏览器不知道如何解释TypeScript文件,但ng serve命令会自动把.ts文件编译为.js文件.</font>\n<h4 id=\"2-导入依赖\">2. 导入依赖</h4>\n<p>import语句定义了我们写代码时要用到哪些模块,这里导入了两样东西:Component和Oninit.</p>\n\n<p>我们从”@angular/core”模块中导入了组件(import Component).”@angular/core”部分告诉程序到哪里查找所需的这些依赖.</p>\n\n<p>这个例子中,告诉编译器:”angular/core”定义并导出了两个JavaScript/TypeScript对象,名字分别为Component和OnInit.</p>\n\n<p>import语句的结构是<code class=\"highlighter-rouge\">import {things} from where</code>格式,把<code class=\"highlighter-rouge\">{thing}</code>这部分的写法叫做<code class=\"highlighter-rouge\">解构</code>.</p>\n\n<p>import的用法很像Java中的import或Ruby中的require:从另一个模块中拉取这些依赖,并且让这些依赖在当前文中可用.</p>\n<h4 id=\"3-注解\">3. 注解</h4>\n<p>导入依赖后,我们还要声明该组件:\n<strong>PATH:</strong>angular/src/app/hello-world/hello-world.component.ts</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-hello-world'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./hello-world.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./hello-world.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<p>AngularJS的依赖注入技术在幕后使用了注解的概念.</p>\n\n<p>可以吧注解看作添加到代码上的元数据.这里的<code class=\"highlighter-rouge\">selector</code>属性用来指出该组件将使用哪个DOM元素.如果模板中有<code class=\"highlighter-rouge\">&lt;app-hello-world&gt;&lt;/app-hello-world&gt;</code>标签,就用该Component类及其组件定义信息对其进行编译.</p>\n<h4 id=\"4-用templateurl添加模板\">4. 用templateUrl添加模板</h4>\n<p>在这个组件中,把templateUrl指定为./hello-world.component.html.这意味着我们将从与该组件同目录的hello-world.component.html文件加载模板:</p>\n\n<p><strong>PATH:</strong>angular/src/app/hello-world/hello-world.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;p&gt;</span>\n  hello-world works!\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div></div>\n<p>当Angular加载该组件时,就会读取此文件的内容作为组件的模板.</p>\n<h4 id=\"5-添加template\">5. 添加template</h4>\n<p>有两种方法定义模板的方法:</p>\n<ul>\n  <li><strong>1. 使用@Component对象中的template属性;</strong></li>\n  <li><strong>2. 指定templateUrl属性.</strong></li>\n</ul>\n\n<p>可以通过传入template选项来为@Component添加一个模板:</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-hello-world'</span><span class=\"p\">,</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s2\">`\n    &lt;p&gt;\n      hello-world works inline!\n    &lt;/p&gt;\n    `</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<font color=\"#c42d31\">注意: 在反引号中(`...`)定义了template字符串,这是ES6中新特性,允许使用多行字符串.</font>\n<table><tr>\n<td bgcolor=\"#d8ff83\">Q: 是否应该将模板放进代码文件中?</td></tr></table>\n<p>A: 视情况而定.如果模板行数短于一页,可以把模板和代码放在一起(.ts文件中),这样可以同时看到逻辑和视图部分.但是把视图和代码内联在一起的最大缺点是:很多编辑器不支持对内部HTML字符串进行语法高亮.</p>\n<h4 id=\"6-用styleurl添加css样式\">6. 用styleUrl添加CSS样式</h4>\n<p><code class=\"highlighter-rouge\">styleUrl: ['./hello-world.component.css']</code>\n这段代码的意思是:我们要使用hello-world.component.css文件作为该组件的样式.Angular使用一项叫做样式封装的技术,它意味着在特定组件中指定的样式只会应用到该组件本身.</p>\n<table><tr>\n<td bgcolor=\"#d8ff83\">Q: template和styleUrl属性的不同点:</td></tr></table>\n<p>A: styleUrl接受一个<code class=\"highlighter-rouge\">数组</code>型参数.这是因为我们可以为同一个组件加载多个样式表.</p>\n<h4 id=\"7加载组件\">7.加载组件</h4>\n<p><strong>PATH:</strong>angular/src/app/app.component.html</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>\n  <span class=\"nt\">&lt;app-hello-world&gt;&lt;/app-hello-world&gt;</span>\n<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n<p>在浏览器地址栏输入<code class=\"highlighter-rouge\">http://localhost:4200/</code>,查看结果.</p>\n\n"
    } ,
  
    {
      "title"    : "Angular-0-环境配置",
      "category" : "angular",
      "tags"     : "angular",
      "url"      : "/angular/2017/11/17/angular-start.html",
      "date"     : "2017年11月17日",
      "content"  : "<h4 id=\"1-安装nodejs\">1. 安装Node.js:<br /></h4>\n<p>验证版本:node 6.9.x和npm 3.x.x<br />\n<code class=\"highlighter-rouge\">$ node -v</code><br />\n<code class=\"highlighter-rouge\">$ npm -v</code></p>\n<h4 id=\"2-安装typescript\">2. 安装TypeScript:<br /></h4>\n<p><code class=\"highlighter-rouge\">$ npm install -g typescript</code><br /></p>\n<h4 id=\"3-安装angular-cli命令行工具\">3. 安装angular-cli命令行工具:</h4>\n<p><code class=\"highlighter-rouge\">$ npm install -g @angular/cli</code><br />\n<!-- more --></p>\n<h4 id=\"4-安装watchman工具帮助angular-cli监听文件系统的变化\">4. 安装watchman工具,帮助angular-cli监听文件系统的变化:<br /></h4>\n<p><code class=\"highlighter-rouge\">$ brew install watchman</code><br /></p>\n<h4 id=\"5-创建实例项目\">5. 创建实例项目:<br /></h4>\n<p><code class=\"highlighter-rouge\">$ ng new angular-hello-world</code><br />\n注意项目命名使用’-‘,而不是’_’.<br /></p>\n<h4 id=\"6-运行项目\">6. 运行项目:<br /></h4>\n<p><code class=\"highlighter-rouge\">ng serve</code><br />\n<code class=\"highlighter-rouge\">ng serve --open</code><br />\n<code class=\"highlighter-rouge\">ng serve --host 0.0.0.0 --port 4201</code><br /></p>\n\n"
    } ,
  
    {
      "title"    : "Jekyll环境配置",
      "category" : "jekyll",
      "tags"     : "",
      "url"      : "/jekyll/2017/10/17/jekyll.html",
      "date"     : "2017年10月17日",
      "content"  : "<h4 id=\"1-安装rvm-\">1. 安装RVM <br /></h4>\n<p>安装RVM: <br />\n\t<code class=\"highlighter-rouge\">$ curl -L get.rvm.in | bash -s stable</code><br />\n  指定源:<br />\n  <code class=\"highlighter-rouge\">$ source ~/.rvm/scripts/rvm</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ rvm -v</code><br /></p>\n\n<h4 id=\"2-安装ruby\">2. 安装Ruby<br /></h4>\n<p>查看已知版本:<br />\n  <code class=\"highlighter-rouge\">$ rvm list known</code><br />\n  安装Ruby:<br />\n  <code class=\"highlighter-rouge\">$ rvm install 2.4.2</code><br />\n<!-- more -->\n  切换Ruby版本:<br />\n  <code class=\"highlighter-rouge\">$ rvm use 2.4.2  - - default</code><br />\n  查询已经安装的版本:<br />\n  <code class=\"highlighter-rouge\">$ rvm list</code><br />\n  卸载一个已经安装版本:<br />\n  <code class=\"highlighter-rouge\">$ rvm remove 2.3.0</code><br /></p>\n\n<h4 id=\"3-安装更新gem\">3. 安装(更新)gem<br /></h4>\n<p>添加国内镜像:<br />\n  <code class=\"highlighter-rouge\">$ gem sources -a https://gems.ruby-china.org/</code><br />\n  删除国外镜像:<br />\n  <code class=\"highlighter-rouge\">$ gem sources -r https://rubygems.org</code><br />\n  更新版本:<br />\n  <code class=\"highlighter-rouge\">$ sudo gem update - -system</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ gem -v</code><br /></p>\n\n<h4 id=\"4-安装jekyll\">4. 安装Jekyll<br /></h4>\n<p>安装jekyll:<br />\n  <code class=\"highlighter-rouge\">$ sudo gem install jekyll</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ jekyll -v</code><br />\n  查看帮助:<br />\n  <code class=\"highlighter-rouge\">$ jekyll _3.6.0_ help</code><br /></p>\n\n<h4 id=\"6-安装bundler\">6. 安装bundler<br /></h4>\n<p>安装bundler:<br />\n  <code class=\"highlighter-rouge\">$ gem install bundler</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ bundler -v</code><br /></p>\n\n<h4 id=\"7-安装homebrew\">7. 安装homebrew<br /></h4>\n<p>安装homebrew:<br />\n  <code class=\"highlighter-rouge\">$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”;</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ brew -v</code><br /></p>\n\n<h4 id=\"8--安装openssl\">8.  安装openssl<br /></h4>\n<p>查看openssl的版本和目录:<br />\n  <code class=\"highlighter-rouge\">$ openssl version</code><br />\n  <code class=\"highlighter-rouge\">$ which openssl</code><br />\n  更新homebrew:<br />\n  <code class=\"highlighter-rouge\">$ brew update</code><br />\n  通过homeberw安装openssl:<br />\n  <code class=\"highlighter-rouge\">$ brew install openssl</code><br />\n  将openssl软链到/usr/local/bin/openssl:<br />\n  <code class=\"highlighter-rouge\">$ ln -s /usr/local/Cellar/openssl/1.0.2l/bin/openssl /usr/local/bin/openssl</code><br />\n  查看版本:<br />\n  <code class=\"highlighter-rouge\">$ openssl version</code><br /></p>\n\n"
    } ,
  
    {
      "title"    : "浪淘沙慢 柳永",
      "category" : "life",
      "tags"     : "peom",
      "url"      : "/life/2016/12/08/peom-002.html",
      "date"     : "2016年12月8日",
      "content"  : "<p>梦觉、透窗风一线，寒灯吹息。那堪酒醒，又闻空阶，夜雨频滴。嗟因循、久作天涯客。负佳人、几许盟言，便忍把、从前欢会，陡顿翻成忧戚。</p>\n\n<p>愁极，再三追思，洞房深处，几度饮散歌阑，香暖鸳鸯被。岂暂时疏散，费伊心力。殚云尤雨，有万般千种，相怜相惜。</p>\n\n<p>恰到如今，天长漏永，无端自家疏隔。知何时、却拥秦云态？原低帏昵枕，轻轻细说与，江乡夜夜，数寒更思忆。</p>\n\n<p><img src=\"/assets/images/posts/wavesand.png\" alt=\"浪淘沙慢\" class=\"post-s-img\" /></p>\n\n<!-- more -->\n\n<p>我从来没有过夜半酒醒的经历，之所以喜欢这首词的原因是“透窗风一线”和“又闻空阶，夜雨频滴”。</p>\n\n<p>我喜欢独处，喜欢熬夜，因为它们都一个共同点，就是有一个安静的环境。我记得从初中到大学每一年的暑假，我都是一个人在家，有的时候，我很庆幸自己能这么自由，安排自己的时间，做自己想做的事。</p>\n\n<p>”又闻空阶，夜雨频滴“，在初中，高中的暑假里，那个时候还住在老房子里，白天到田边转转，到朋友家玩玩，到了晚上，夜很静，虽然家处在乡间，本来就不喧闹，但夜的黑更添一份静谧。呆在屋子里，照着如月色皎白的节能灯，临摹一些画，或是写一些感悟，没有电视，手机也只能刷刷动态，就这样，很简单，却很充实。而最让人感触的是下雨的夜，让夜变得更加宁静，这种宁静是屋里屋外两相隔，仿佛是一叶扁舟于湖面。</p>\n\n<p><img src=\"/assets/images/posts/oldhouse.jpg\" alt=\"老房子\" class=\"post-s-img\" /></p>\n\n<p>到了大学，变得是住处，不变的是独处。大学的暑假变得更宅，很少出去玩，就在家看看电视，逛逛网站，打打游戏，如此而已，反而到了晚上，整个人变得精神了，好像新的一天刚刚开始。</p>\n\n<p>有一天晚上，窗外月色很好，我打开了窗，迎着夜色，晚风，虫鸣，我想起了一句词，“透窗风一线”，于是我兴奋地把网名改成了透窗风一线，这就是我为什么喜欢这首词的原因。</p>\n"
    } ,
  
    {
      "title"    : "Mylife",
      "category" : "life",
      "tags"     : "word",
      "url"      : "/life/2016/12/08/word-002.html",
      "date"     : "2016年12月8日",
      "content"  : "<p>我希望，如电影般的，在必要的时候，比如在程序员做不下去的时候，掏出我老艺术家的身份。</p>\n"
    } ,
  
    {
      "title"    : "蝶恋花 柳永",
      "category" : "life",
      "tags"     : "peom",
      "url"      : "/life/2016/12/06/peom-001.html",
      "date"     : "2016年12月6日",
      "content"  : "<p>伫倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。</p>\n\n<p>拟把疏狂图一醉，对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。</p>\n\n<p><img src=\"/assets/images/posts/loveofbutterfly.png\" alt=\"蝶恋花\" class=\"post-s-img\" /></p>\n\n<!-- more -->\n\n<p>柳永，我最喜欢的词人，没有之一。</p>\n\n<p>记得高三晚上熄灯后，大家都会打着台灯再学习一会儿，而我，要是有新一期的知音漫客就会游历其中，要是没有就会拜读宋词鉴赏辞典，沉醉其里。</p>\n\n<p>从一开始雨霖铃的初步了解，到后来看到他越来越多的词，也就越来越欣赏他。通过他的词经历他的一切，感觉一切都是享受。</p>\n\n<p>这首词是怀人之作。“伫倚危楼，望极春愁”，我也会思乡怀人，只是如今没了危楼，生活在热闹人间，少有时间用来眺望远方，怀念过往，也不会因为草色烟光，春色残照徒添愁绪，或许是自己被生活麻木了，忘记了远方，或许是自己被孤独戕害了，不敢去怀念。</p>\n\n<p>“对酒当歌，强乐无味”，我也醉过，也强颜欢笑过，知道其中滋味。</p>\n\n<p>“衣带渐宽终不悔，为伊消得人憔悴”，情何至此？有一段时间，很长一段时间，我也这般思恋一个人，这般坚定，这般决绝，不知她在何方，只知道自己的那颗心在这里，知道那种感觉不会变。当然，还是没经得起时间，毕竟终未再见。</p>\n\n<p>的确，有些情很深，有些情很淡，有些情很远，有些情很近，我时常告诉自己，珍惜抓得住的情。</p>\n"
    } ,
  
    {
      "title"    : "踩空了楼梯",
      "category" : "life",
      "tags"     : "record",
      "url"      : "/life/2016/12/05/record-001.html",
      "date"     : "2016年12月5日",
      "content"  : "<p align=\"center\" style=\"font-size:20px;color:#333;\">多少次与死亡擦肩而过,就有多少次觉得死去不如活着..</p>\n\n<p><img src=\"/assets/images/posts/stairs.png\" alt=\"stairs\" class=\"post-s-img\" /></p>\n\n<p>今年8月份去山东日照出差，连续工作了两周后，师傅带着我们去海边洗海澡。老实说十分兴奋，一下水先把游泳圈套上，然后往水深处走，走了一会了，水还没淹过肚子，觉得水浅没必要用游泳圈，就把游泳圈套在手上，继续往深处走。<!-- more -->没想到从海那边打过来一个浪，脚离开地面，整个人失去平衡，一头栽在水中，一时间海水把我眼镜冲掉了，在水里我下意识一把抓住了眼镜，打算站起来，然而一个浪接一个浪的打过来，然后一手拿眼镜，一手拿游泳圈，游泳圈在水面浮着，整个人在水里挣扎，不知道挣扎了多久，也不知道喝了多少海水，当时心里想着要是在喝撑前没被浪冲到水浅的地方，可能我的第一次出差就成最后一次。</p>\n\n<p><img src=\"/assets/images/posts/seaside.jpg\" alt=\"seaside\" class=\"post-s-img\" /></p>\n\n<p>那时真的用了吃奶的劲才活下来。然后我套上游泳圈，面无表情的继续洗海澡，装作什么都没有发生过一样。后来不小心海水溅到口里，才发现海水真的是咸得苦，刚才喝了几口都没觉得。我在挣扎的时候我感觉整个海边就我一个人，那种绝望我是领会到了，然而上一次经历这种绝望，便是我踩空楼梯的时候。</p>\n\n<p>在高二的一段时间，我整天都浑浑噩噩，无限琐事，无限循环。</p>\n\n<p>故事就发生在一个没有太阳的上午。这周轮换到我当学习委员，刚好教室没有粉笔，跑了好几次都没领到。于是在这一天的第二节课课间，我去了楼下的办公室，依然被告知还没有粉笔。又只能等下次，怀着极其消极的心态往教室走，在上楼梯时，真的是所有思绪一下子涌了上来，突然不知道怎么上楼梯了（当时应该是突然不知该迈哪只脚，迈出去的时候，迈少了），然后就踩空了，我一般对朋友们这样讲。其实那天真实情况是：在所有思绪一下子涌了上来的时候，我还知道怎么上楼梯，但我就在那么迷的时候，还多看了旁边的两个漂亮女生，然后才不知到怎么上楼梯，然后踩空了，然后脑子一片空白，然后旁边两个女生也吓了一跳，然后我很慌的站了起来故作镇定地走回了教室。回到教室过了一会发现有点不对劲，我摸了下巴，居然在流血，没办法，只有向物理老师请了假去医院。</p>\n\n<p>离开教室我先来到医务室，医生叫我去校外医院去缝几针。然后我就来到小卖部，买了两包卫生纸，用来止血，然后往校门口走，没想到被门卫拦了下来，说是没有请假条不能离校，我说你看我这样还要请假条吗?我指了我还在流血的下巴。就跟我担心的一样，没错，还要。没办法，我只能去教务处去批请假条，真是怕什么来什么，没想到教务处没人。那个时候我两包纸都用完了，只能在教学楼闲逛，说真的那个时候，虽然很迷，但还是有点血性，想要不然就流血流死算了，反正生活这么烦恼。现在想来，虽然当时很迷，陷入生活几件琐事的无限循环中，出不来，但是还是庆幸有点理性，去小卖部给班主任打了电话，班主任在上课，叫我放了学去办公室找他。于是我就这么流血流了一节课，你要问我为什么现在有轻微的晕血，我只说见多了就腻了。然后我就来到班主任办公室等他，真的当时自己真的很怕，感觉自己在死亡的边缘，时间又过的很慢，班主任下了课怎么还不来，感觉在拖堂。</p>\n\n<p>最后我坐上了班主任的车，他看了我的伤口，说你这伤口挺大，应该要缝几针，刚好我有认识的人在开小诊所，我带你去吧，然后我们来到一个很偏的诊所。那个医生看了我的伤口说这个要缝，然后准备了一会儿，我也准备好了，然后他说，我只缝一针，就不打麻药了怎么样，我纠结了一下，还就答应了，然后，一针，两针，三针…我想骂人。</p>\n\n<p>后来缝好包扎好，回到学校，回到寝室，看看室友，仿佛什么都没发生过。</p>\n\n<p>那天我踩空了楼梯，却把自己摔醒了，可能是因为脑缺血顾及不了琐事了吧，也可能是经历过”死亡”，其他都感觉不重要吧。</p>\n\n<p>那天我踩空了楼梯，这世间少了一个烦恼的男孩，多了一个积极乐观的男孩，真的，只有真正地经历过绝望，你才知道原来生活其实挺美好的。(除了花一段时间消除对楼梯的恐惧…)</p>\n"
    } ,
  
    {
      "title"    : "Mylife",
      "category" : "life",
      "tags"     : "word",
      "url"      : "/life/2016/12/01/word-001.html",
      "date"     : "2016年12月1日",
      "content"  : "<p>这几天心里颇不宁静,仿佛手里没有双王的感觉..</p>\n"
    } ,
  
    {
      "title"    : "Site Style Guides",
      "category" : "tool",
      "tags"     : "guides",
      "url"      : "/guides/",
      "date"     : "1996年4月5日",
      "content"  : "<h2 id=\"site-style-guides\">Site Style Guides</h2>\n<h4 id=\"header-titie\">Header Titie</h4>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">#### Header Title</span>\n</code></pre></div></div>\n\n<h5 id=\"code-path\">Code Path</h5>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">##### Code Path</span>\n</code></pre></div></div>\n\n<div class=\"note info\">\n  <h3>Info Message Title</h3>\n  <span>Info Content..</span>\n</div>\n<!-- more -->\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"note info\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h3&gt;</span>Info Message Title<span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>Info Content..<span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<div class=\"note warn\">\n  <h3>Warn Message Title</h3>\n  <span>Warn Content..</span>\n</div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"note warn\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h3&gt;</span>Warn Message Title<span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>Warn Content..<span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<div class=\"note error\">\n  <h3>Error Message Title</h3>\n  <span>Error Content..</span>\n</div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"note error\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h3&gt;</span>Error Message Title<span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;span&gt;</span>Error Content..<span class=\"nt\">&lt;/span&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<div class=\"ques\">\n  Qn: Question\n</div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ques\"</span><span class=\"nt\">&gt;</span>\n  Qn: Question\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<div class=\"ans\">\n  Kn: Key Anwser\n</div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ans\"</span><span class=\"nt\">&gt;</span>\n  Kn: Key Anwser\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n"
    } 
  
]